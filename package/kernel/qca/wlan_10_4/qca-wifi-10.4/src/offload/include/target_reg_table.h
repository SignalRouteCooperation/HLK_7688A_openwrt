/*
 * Copyright (c) 2013 Qualcomm Atheros, Inc.
 * All Rights Reserved.
 * Qualcomm Atheros Confidential and Proprietary.
 * */

//------------------------------------------------------------------------------
// <copyright file="target_reg_table.h" company="Atheros">
//    Copyright (c) 2004-2010 Atheros Corporation.  All rights reserved.
// $ATH_LICENSE_HOSTSDK0_C$
//------------------------------------------------------------------------------
//==============================================================================
// Target register table macros and structure definitions
//
// Author(s): ="Atheros"
//==============================================================================

#ifndef TARGET_REG_TABLE_H_
#define TARGET_REG_TABLE_H_

#include "targaddrs.h"
/*** WARNING : Add to the end of the TABLE! do not change the order ****/
typedef struct targetdef_s {
    u_int32_t d_RTC_SOC_BASE_ADDRESS;
    u_int32_t d_RTC_WMAC_BASE_ADDRESS;
    u_int32_t d_SYSTEM_SLEEP_OFFSET;
    u_int32_t d_WLAN_SYSTEM_SLEEP_OFFSET;
    u_int32_t d_WLAN_SYSTEM_SLEEP_DISABLE_LSB;
    u_int32_t d_WLAN_SYSTEM_SLEEP_DISABLE_MASK;
    u_int32_t d_CLOCK_CONTROL_OFFSET;
    u_int32_t d_CLOCK_CONTROL_SI0_CLK_MASK;
    u_int32_t d_RESET_CONTROL_OFFSET;
    u_int32_t d_RESET_CONTROL_SI0_RST_MASK;
    u_int32_t d_WLAN_RESET_CONTROL_OFFSET;
    u_int32_t d_WLAN_RESET_CONTROL_COLD_RST_MASK;
    u_int32_t d_WLAN_RESET_CONTROL_WARM_RST_MASK;
    u_int32_t d_GPIO_BASE_ADDRESS;
    u_int32_t d_GPIO_PIN0_OFFSET;
    u_int32_t d_GPIO_PIN1_OFFSET;
    u_int32_t d_GPIO_PIN0_CONFIG_MASK;
    u_int32_t d_GPIO_PIN1_CONFIG_MASK;
    u_int32_t d_SI_CONFIG_BIDIR_OD_DATA_LSB;
    u_int32_t d_SI_CONFIG_BIDIR_OD_DATA_MASK;
    u_int32_t d_SI_CONFIG_I2C_LSB;
    u_int32_t d_SI_CONFIG_I2C_MASK;
    u_int32_t d_SI_CONFIG_POS_SAMPLE_LSB;
    u_int32_t d_SI_CONFIG_POS_SAMPLE_MASK;
    u_int32_t d_SI_CONFIG_INACTIVE_CLK_LSB;
    u_int32_t d_SI_CONFIG_INACTIVE_CLK_MASK;
    u_int32_t d_SI_CONFIG_INACTIVE_DATA_LSB;
    u_int32_t d_SI_CONFIG_INACTIVE_DATA_MASK;
    u_int32_t d_SI_CONFIG_DIVIDER_LSB;
    u_int32_t d_SI_CONFIG_DIVIDER_MASK;
    u_int32_t d_SI_BASE_ADDRESS;
    u_int32_t d_SI_CONFIG_OFFSET;
    u_int32_t d_SI_TX_DATA0_OFFSET;
    u_int32_t d_SI_TX_DATA1_OFFSET;
    u_int32_t d_SI_RX_DATA0_OFFSET;
    u_int32_t d_SI_RX_DATA1_OFFSET;
    u_int32_t d_SI_CS_OFFSET;
    u_int32_t d_SI_CS_DONE_ERR_MASK;
    u_int32_t d_SI_CS_DONE_INT_MASK;
    u_int32_t d_SI_CS_START_LSB;
    u_int32_t d_SI_CS_START_MASK;
    u_int32_t d_SI_CS_RX_CNT_LSB;
    u_int32_t d_SI_CS_RX_CNT_MASK;
    u_int32_t d_SI_CS_TX_CNT_LSB;
    u_int32_t d_SI_CS_TX_CNT_MASK;
    u_int32_t d_BOARD_DATA_SZ;
    u_int32_t d_BOARD_EXT_DATA_SZ;
    u_int32_t d_MBOX_BASE_ADDRESS;
    u_int32_t d_LOCAL_SCRATCH_OFFSET;
    u_int32_t d_CPU_CLOCK_OFFSET;
    u_int32_t d_GPIO_PIN10_OFFSET;
    u_int32_t d_GPIO_PIN11_OFFSET;
    u_int32_t d_GPIO_PIN12_OFFSET;
    u_int32_t d_GPIO_PIN13_OFFSET;
    u_int32_t d_CLOCK_GPIO_OFFSET;
    u_int32_t d_CPU_CLOCK_STANDARD_LSB;
    u_int32_t d_CPU_CLOCK_STANDARD_MASK;
    u_int32_t d_LPO_CAL_ENABLE_LSB;
    u_int32_t d_LPO_CAL_ENABLE_MASK;
    u_int32_t d_CLOCK_GPIO_BT_CLK_OUT_EN_LSB;
    u_int32_t d_CLOCK_GPIO_BT_CLK_OUT_EN_MASK;
    u_int32_t d_ANALOG_INTF_BASE_ADDRESS;
    u_int32_t d_WLAN_MAC_BASE_ADDRESS;
    u_int32_t d_CE0_BASE_ADDRESS;
    u_int32_t d_CE1_BASE_ADDRESS;
    u_int32_t d_FW_INDICATOR_ADDRESS;
    u_int32_t d_FW_CPU_PLL_CONFIG;
    u_int32_t d_DRAM_BASE_ADDRESS;
    u_int32_t d_SOC_CORE_BASE_ADDRESS;
    u_int32_t d_CORE_CTRL_ADDRESS;
    u_int32_t d_CE_COUNT;
    u_int32_t d_MSI_NUM_REQUEST;
    u_int32_t d_MSI_ASSIGN_FW;
    u_int32_t d_MSI_ASSIGN_CE_INITIAL;
    u_int32_t d_PCIE_INTR_ENABLE_ADDRESS;
    u_int32_t d_PCIE_INTR_CLR_ADDRESS;
    u_int32_t d_PCIE_INTR_FIRMWARE_MASK;
    u_int32_t d_PCIE_INTR_CE_MASK_ALL;
    u_int32_t d_CORE_CTRL_CPU_INTR_MASK;
    u_int32_t d_WIFICMN_PCIE_BAR_REG_ADDRESS;
    /* htt_rx.c */
#if 0
    u_int32_t d_RX_FW_DESC_OFFSET_DWORD;
    u_int32_t d_RX_ATTENTION_OFFSET_DWORD;
    u_int32_t d_RX_FRAG_INFO_OFFSET_DWORD;
    u_int32_t d_RX_MPDU_START_OFFSET_DWORD;
    u_int32_t d_RX_MSDU_START_OFFSET_DWORD;
    u_int32_t d_RX_MSDU_END_OFFSET_DWORD;
    u_int32_t d_RX_MPDU_END_OFFSET_DWORD;
    u_int32_t d_RX_PPDU_START_OFFSET_DWORD;
    u_int32_t d_RX_PPDU_END_OFFSET_DWORD;
    u_int32_t d_RX_HDR_STATUS_OFFSET_DWORD;
    u_int32_t d_RX_MPDU_START_0_ENCRYPTED_MASK;
    u_int32_t d_RX_MPDU_START_0_ENCRYPTED_LSB;
    u_int32_t d_RX_MPDU_START_0_TO_DS_MASK;
    u_int32_t d_RX_MPDU_START_0_TO_DS_LSB;
    u_int32_t d_RX_MPDU_START_0_FR_DS_MASK;
    u_int32_t d_RX_MPDU_START_0_FR_DS_LSB;
    u_int32_t d_RX_MPDU_START_0_SEQ_NUM_MASK;
    u_int32_t d_RX_MPDU_START_0_SEQ_NUM_LSB;
    u_int32_t d_RX_MPDU_START_1_PN_31_0_MASK;
    u_int32_t d_RX_MPDU_START_1_PN_31_0_LSB;
    u_int32_t d_RX_MPDU_START_2_PN_47_32_LSB;
    u_int32_t d_RX_MPDU_START_2_PN_47_32_MASK;
    u_int32_t d_RX_MSDU_START_0_MSDU_LENGTH_MASK;
    u_int32_t d_RX_MSDU_START_0_MSDU_LENGTH_LSB;
    u_int32_t d_RX_MSDU_START_0_IP_OFFSET_MASK;
    u_int32_t d_RX_MSDU_START_0_IP_OFFSET_LSB;
    u_int32_t d_RX_MSDU_START_0_TCP_UDP_OFFSET_MASK;
    u_int32_t d_RX_MSDU_START_0_TCP_UDP_OFFSET_LSB;
    u_int32_t d_RX_MSDU_START_1_FLOW_ID_CRC_MASK;
    u_int32_t d_RX_MSDU_START_1_FLOW_ID_CRC_LSB;
    u_int32_t d_RX_MSDU_START_2_TCP_PROTO_MASK;
    u_int32_t d_RX_MSDU_START_2_TCP_PROTO_LSB;
    u_int32_t d_RX_MSDU_START_2_UDP_PROTO_MASK;
    u_int32_t d_RX_MSDU_START_2_UDP_PROTO_LSB;
    u_int32_t d_RX_MSDU_START_2_IP_FRAG_MASK;
    u_int32_t d_RX_MSDU_START_2_IP_FRAG_LSB;
    u_int32_t d_RX_MSDU_START_2_IPV6_PROTO_MASK;
    u_int32_t d_RX_MSDU_START_2_IPV6_PROTO_LSB;
    u_int32_t d_RX_MSDU_START_2_TCP_ONLY_ACK_MASK;
    u_int32_t d_RX_MSDU_START_2_TCP_ONLY_ACK_LSB;
    u_int32_t d_RX_MSDU_START_2_DECAP_FORMAT_OFFSET;
    u_int32_t d_RX_MSDU_START_2_DECAP_FORMAT_MASK;
    u_int32_t d_RX_MSDU_START_2_DECAP_FORMAT_LSB;
    u_int32_t d_RX_MSDU_END_0_TCP_UDP_CHKSUM_MASK;
    u_int32_t d_RX_MSDU_END_0_TCP_UDP_CHKSUM_LSB;
    u_int32_t d_RX_MSDU_END_1_EXT_WAPI_PN_63_48_MASK;
    u_int32_t d_RX_MSDU_END_1_EXT_WAPI_PN_63_48_LSB;
    u_int32_t d_RX_MSDU_END_2_EXT_WAPI_PN_95_64_MASK;
    u_int32_t d_RX_MSDU_END_2_EXT_WAPI_PN_95_64_LSB;
    u_int32_t d_RX_MSDU_END_3_EXT_WAPI_PN_127_96_MASK;
    u_int32_t d_RX_MSDU_END_3_EXT_WAPI_PN_127_96_LSB;
    u_int32_t d_RX_MSDU_END_4_FIRST_MSDU_MASK;
    u_int32_t d_RX_MSDU_END_4_FIRST_MSDU_LSB;
    u_int32_t d_RX_MSDU_END_4_LAST_MSDU_MASK;
    u_int32_t d_RX_MSDU_END_4_LAST_MSDU_LSB;
    u_int32_t d_RX_MSDU_END_8_LRO_ELIGIBLE_MASK;
    u_int32_t d_RX_MSDU_END_8_LRO_ELIGIBLE_LSB;
    u_int32_t d_RX_MSDU_END_8_L3_HEADER_PADDING_MASK;
    u_int32_t d_RX_MSDU_END_8_L3_HEADER_PADDING_LSB;
    u_int32_t d_RX_PPDU_START_4_RSSI_COMB_MASK;
    u_int32_t d_RX_PPDU_START_4_RSSI_COMB_LSB;
    u_int32_t d_RX_PPDU_START_5_PREAMBLE_TYPE_MASK;
    u_int32_t d_RX_PPDU_START_5_PREAMBLE_TYPE_LSB;
    u_int32_t d_RX_PPDU_START_5_L_SIG_RATE_MASK;
    u_int32_t d_RX_PPDU_START_5_L_SIG_RATE_LSB;
    u_int32_t d_RX_PPDU_START_5_L_SIG_RATE_SELECT_MASK;
    u_int32_t d_RX_PPDU_START_5_L_SIG_RATE_SELECT_LSB;
    u_int32_t d_RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_MASK;
    u_int32_t d_RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_LSB;
    u_int32_t d_RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_MASK;
    u_int32_t d_RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_LSB;
    u_int32_t d_RX_PPDU_START_8_VHT_SIG_B_MASK;
    u_int32_t d_RX_PPDU_START_8_VHT_SIG_B_LSB;
    u_int32_t d_RX_PPDU_START_9_SERVICE_MASK;
    u_int32_t d_RX_PPDU_START_9_SERVICE_LSB;
    u_int32_t d_RX_PPDU_END_16_TSF_TIMESTAMP_MASK;
    u_int32_t d_RX_PPDU_END_16_TSF_TIMESTAMP_LSB;
    u_int32_t d_RX_PPDU_END_ANTENNA_OFFSET;
    u_int32_t d_RX_ATTENTION_0_FIRST_MPDU_MASK;
    u_int32_t d_RX_ATTENTION_0_FIRST_MPDU_LSB;
    u_int32_t d_RX_ATTENTION_0_LAST_MPDU_MASK;
    u_int32_t d_RX_ATTENTION_0_LAST_MPDU_LSB;
    u_int32_t d_RX_ATTENTION_0_MCAST_BCAST_MASK;
    u_int32_t d_RX_ATTENTION_0_MCAST_BCAST_LSB;
    u_int32_t d_RX_ATTENTION_0_FRAGMENT_MASK;
    u_int32_t d_RX_ATTENTION_0_FRAGMENT_LSB;
    u_int32_t d_RX_ATTENTION_0_MPDU_LENGTH_ERR_MASK;
    u_int32_t d_RX_ATTENTION_0_MORE_DATA_MASK;
    u_int32_t d_RX_ATTENTION_0_MSDU_DONE_MASK;
    u_int32_t d_RX_ATTENTION_0_TCP_UDP_CHKSUM_FAIL_MASK;
    u_int32_t d_RX_ATTENTION_0_FCS_ERR_MASK;
    u_int32_t d_RX_ATTENTION_0_MGMT_TYPE_MASK;
    u_int32_t d_RX_ATTENTION_0_PHY_DATA_TYPE_MASK;
    u_int32_t d_RX_FRAG_INFO_0_RING2_MORE_COUNT_MASK;
    u_int32_t d_RX_FRAG_INFO_0_RING2_MORE_COUNT_LSB;
#endif
    /* htt tx */
    u_int32_t d_MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_MASK;
    u_int32_t d_MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_MASK;
    u_int32_t d_MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_MASK;
    u_int32_t d_MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_MASK;
    u_int32_t d_MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_LSB;
    u_int32_t d_MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_LSB;
    u_int32_t d_MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_LSB;
    u_int32_t d_MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_LSB;
    /* copy_engine.c */
    u_int32_t d_DST_WR_INDEX_ADDRESS;
    u_int32_t d_SRC_WATERMARK_ADDRESS;
    u_int32_t d_SRC_WATERMARK_LOW_MASK;
    u_int32_t d_SRC_WATERMARK_HIGH_MASK;
    u_int32_t d_DST_WATERMARK_LOW_MASK;
    u_int32_t d_DST_WATERMARK_HIGH_MASK;
    u_int32_t d_CURRENT_SRRI_ADDRESS;
    u_int32_t d_CURRENT_DRRI_ADDRESS;
    u_int32_t d_HOST_IS_SRC_RING_HIGH_WATERMARK_MASK;
    u_int32_t d_HOST_IS_SRC_RING_LOW_WATERMARK_MASK;
    u_int32_t d_HOST_IS_DST_RING_HIGH_WATERMARK_MASK;
    u_int32_t d_HOST_IS_DST_RING_LOW_WATERMARK_MASK;
    u_int32_t d_HOST_IS_ADDRESS;
    u_int32_t d_HOST_IS_COPY_COMPLETE_MASK;
    u_int32_t d_CE_CMD_ADDRESS;
    u_int32_t d_CE_CMD_HALT_MASK;
    u_int32_t d_CE_WRAPPER_BASE_ADDRESS;
    u_int32_t d_CE_WRAPPER_INTERRUPT_SUMMARY_ADDRESS;
    u_int32_t d_HOST_IE_ADDRESS;
    u_int32_t d_HOST_IE_COPY_COMPLETE_MASK;
    u_int32_t d_SR_BA_ADDRESS;
    u_int32_t d_SR_SIZE_ADDRESS;
    u_int32_t d_CE_CTRL1_ADDRESS;
    u_int32_t d_CE_CTRL1_DMAX_LENGTH_MASK;
    u_int32_t d_DR_BA_ADDRESS;
    u_int32_t d_DR_SIZE_ADDRESS;
    u_int32_t d_MISC_IE_ADDRESS;
    u_int32_t d_MISC_IS_AXI_ERR_MASK;
    u_int32_t d_MISC_IS_DST_ADDR_ERR_MASK;
    u_int32_t d_MISC_IS_SRC_LEN_ERR_MASK;
    u_int32_t d_MISC_IS_DST_MAX_LEN_VIO_MASK;
    u_int32_t d_MISC_IS_DST_RING_OVERFLOW_MASK;
    u_int32_t d_MISC_IS_SRC_RING_OVERFLOW_MASK;
    u_int32_t d_SRC_WATERMARK_LOW_LSB;
    u_int32_t d_SRC_WATERMARK_HIGH_LSB;
    u_int32_t d_DST_WATERMARK_LOW_LSB;
    u_int32_t d_DST_WATERMARK_HIGH_LSB;
    u_int32_t d_CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_MASK;
    u_int32_t d_CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_LSB;
    u_int32_t d_CE_CTRL1_DMAX_LENGTH_LSB;
    u_int32_t d_CE_CTRL1_SRC_RING_BYTE_SWAP_EN_MASK;
    u_int32_t d_CE_CTRL1_DST_RING_BYTE_SWAP_EN_MASK;
    u_int32_t d_CE_CTRL1_SRC_RING_BYTE_SWAP_EN_LSB;
    u_int32_t d_CE_CTRL1_DST_RING_BYTE_SWAP_EN_LSB;
    u_int32_t d_CE_CMD_HALT_STATUS_MASK;
    u_int32_t d_CE_CMD_HALT_STATUS_LSB;
    u_int32_t d_SR_WR_INDEX_ADDRESS;
    u_int32_t d_DST_WATERMARK_ADDRESS;
#if 0
    u_int32_t d_CE_SRC_DESC_SIZE_DWORD;
    u_int32_t d_CE_DEST_DESC_SIZE_DWORD;
    u_int32_t d_CE_SRC_DESC_SRC_PTR_OFFSET_DWORD;
    u_int32_t d_CE_SRC_DESC_INFO_OFFSET_DWORD;
    u_int32_t d_CE_DEST_DESC_DEST_PTR_OFFSET_DWORD;
    u_int32_t d_CE_DEST_DESC_INFO_OFFSET_DWORD;
    u_int32_t d_CE_SRC_DESC_INFO_NBYTES_MASK;
    u_int32_t d_CE_SRC_DESC_INFO_NBYTES_SHIFT;
    u_int32_t d_CE_SRC_DESC_INFO_GATHER_MASK;
    u_int32_t d_CE_SRC_DESC_INFO_GATHER_SHIFT;
    u_int32_t d_CE_SRC_DESC_INFO_BYTE_SWAP_MASK;
    u_int32_t d_CE_SRC_DESC_INFO_BYTE_SWAP_SHIFT;
    u_int32_t d_CE_SRC_DESC_INFO_HOST_INT_DISABLE_MASK;
    u_int32_t d_CE_SRC_DESC_INFO_HOST_INT_DISABLE_SHIFT;
    u_int32_t d_CE_SRC_DESC_INFO_TARGET_INT_DISABLE_MASK;
    u_int32_t d_CE_SRC_DESC_INFO_TARGET_INT_DISABLE_SHIFT;
    u_int32_t d_CE_SRC_DESC_INFO_META_DATA_MASK;
    u_int32_t d_CE_SRC_DESC_INFO_META_DATA_SHIFT;
    u_int32_t d_CE_DEST_DESC_INFO_NBYTES_MASK;
    u_int32_t d_CE_DEST_DESC_INFO_NBYTES_SHIFT;
    u_int32_t d_CE_DEST_DESC_INFO_GATHER_MASK;
    u_int32_t d_CE_DEST_DESC_INFO_GATHER_SHIFT;
    u_int32_t d_CE_DEST_DESC_INFO_BYTE_SWAP_MASK;
    u_int32_t d_CE_DEST_DESC_INFO_BYTE_SWAP_SHIFT;
    u_int32_t d_CE_DEST_DESC_INFO_HOST_INT_DISABLE_MASK;
    u_int32_t d_CE_DEST_DESC_INFO_HOST_INT_DISABLE_SHIFT;
    u_int32_t d_CE_DEST_DESC_INFO_TARGET_INT_DISABLE_MASK;
    u_int32_t d_CE_DEST_DESC_INFO_TARGET_INT_DISABLE_SHIFT;
    u_int32_t d_CE_DEST_DESC_INFO_META_DATA_MASK;
    u_int32_t d_CE_DEST_DESC_INFO_META_DATA_SHIFT;
#endif
    u_int32_t d_PCIE_INTR_CAUSE_ADDRESS;
    u_int32_t d_SOC_RESET_CONTROL_ADDRESS;
    u_int32_t d_SOC_RESET_CONTROL_CE_RST_MASK;
    u_int32_t d_SOC_RESET_CONTROL_CPU_WARM_RST_MASK;
    u_int32_t d_CPU_INTR_ADDRESS;
    u_int32_t d_SOC_LF_TIMER_CONTROL0_ADDRESS;
    u_int32_t d_SOC_LF_TIMER_CONTROL0_ENABLE_MASK;

    u_int32_t d_SI_CONFIG_ERR_INT_MASK;
    u_int32_t d_SI_CONFIG_ERR_INT_LSB;
    u_int32_t d_GPIO_ENABLE_W1TS_LOW_ADDRESS;
    u_int32_t d_GPIO_PIN0_CONFIG_LSB;
    u_int32_t d_GPIO_PIN0_PAD_PULL_LSB;
    u_int32_t d_GPIO_PIN0_PAD_PULL_MASK;
    u_int32_t d_SOC_CHIP_ID_ADDRESS;
    u_int32_t d_SOC_CHIP_ID_REVISION_MASK;
    u_int32_t d_SOC_CHIP_ID_REVISION_LSB;
    u_int32_t d_SOC_CHIP_ID_REVISION_MSB;
    u_int32_t d_FW_AXI_MSI_ADDR;
    u_int32_t d_FW_AXI_MSI_DATA;
    u_int32_t d_WLAN_SUBSYSTEM_CORE_ID_ADDRESS;
    u_int32_t d_FPGA_VERSION_ADDRESS;
    u_int32_t d_WIFICMN_INT_STATUS_ADDRESS;
} TARGET_REGISTER_TABLE;

#define ATH_UNSUPPORTED_REG_OFFSET 0xffffffff
#define ATH_SUPPORTED_BY_TARGET(reg_offset) ((reg_offset) != ATH_UNSUPPORTED_REG_OFFSET)

#if defined(AR6320)
#define BOARD_DATA_SZ_MAX 8192
#else
#define BOARD_DATA_SZ_MAX (14 *1024)
#endif

#if defined(MY_TARGET_DEF) /* { */
#if defined(ATHR_WIN_DEF)
#define ATH_REG_TABLE_DIRECT_ASSIGN
#endif

/* Cross-platform compatibility */
#if !defined(SOC_RESET_CONTROL_OFFSET) && defined(RESET_CONTROL_OFFSET)
#define SOC_RESET_CONTROL_OFFSET RESET_CONTROL_OFFSET
#endif

#if !defined(CLOCK_GPIO_OFFSET)
#define CLOCK_GPIO_OFFSET ATH_UNSUPPORTED_REG_OFFSET
#define CLOCK_GPIO_BT_CLK_OUT_EN_LSB 0
#define CLOCK_GPIO_BT_CLK_OUT_EN_MASK 0
#endif

#if !defined(WLAN_MAC_BASE_ADDRESS)
#define WLAN_MAC_BASE_ADDRESS        ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(CE0_BASE_ADDRESS)
#define CE0_BASE_ADDRESS ATH_UNSUPPORTED_REG_OFFSET
#define CE1_BASE_ADDRESS ATH_UNSUPPORTED_REG_OFFSET
#define CE_COUNT 0
#endif

#if !defined(MSI_NUM_REQUEST)
#define MSI_NUM_REQUEST              0
#define MSI_ASSIGN_FW                0
#define MSI_ASSIGN_CE_INITIAL        0
#endif

#if !defined(FW_INDICATOR_ADDRESS)
#define FW_INDICATOR_ADDRESS     ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(FW_CPU_PLL_CONFIG)
#define FW_CPU_PLL_CONFIG     ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(DRAM_BASE_ADDRESS)
#define DRAM_BASE_ADDRESS            ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(SOC_CORE_BASE_ADDRESS)
#define SOC_CORE_BASE_ADDRESS        ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(CPU_INTR_ADDRESS)
#define CPU_INTR_ADDRESS        ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(SOC_LF_TIMER_CONTROL0_ADDRESS)
#define SOC_LF_TIMER_CONTROL0_ADDRESS        ATH_UNSUPPORTED_REG_OFFSET
#define SOC_LF_TIMER_CONTROL0_ENABLE_MASK        ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(SOC_RESET_CONTROL_ADDRESS)
#define SOC_RESET_CONTROL_ADDRESS    ATH_UNSUPPORTED_REG_OFFSET
#define SOC_RESET_CONTROL_CE_RST_MASK    ATH_UNSUPPORTED_REG_OFFSET
#define SOC_RESET_CONTROL_CPU_WARM_RST_MASK    ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(CORE_CTRL_ADDRESS)
#define CORE_CTRL_ADDRESS            ATH_UNSUPPORTED_REG_OFFSET
#define CORE_CTRL_CPU_INTR_MASK      0
#endif

#if !defined(PCIE_INTR_ENABLE_ADDRESS)
#define PCIE_INTR_ENABLE_ADDRESS     ATH_UNSUPPORTED_REG_OFFSET
#define PCIE_INTR_CLR_ADDRESS        ATH_UNSUPPORTED_REG_OFFSET
#define PCIE_INTR_FIRMWARE_MASK      ATH_UNSUPPORTED_REG_OFFSET
#define PCIE_INTR_CE_MASK_ALL        ATH_UNSUPPORTED_REG_OFFSET
#define PCIE_INTR_CAUSE_ADDRESS      ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(WIFICMN_PCIE_BAR_REG_ADDRESS)
#define WIFICMN_PCIE_BAR_REG_ADDRESS    ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(WIFICMN_INT_STATUS_ADDRESS)
#define WIFICMN_INT_STATUS_ADDRESS    ATH_UNSUPPORTED_REG_OFFSET
#endif

#define RX_FW_DESC_OFFSET_DWORD                  0
#define RX_ATTENTION_OFFSET_DWORD                1 /* FW desc */
#define RX_FRAG_INFO_OFFSET_DWORD                (RX_ATTENTION_OFFSET_DWORD + NUM_OF_DWORDS_RX_ATTENTION)
#define RX_MPDU_START_OFFSET_DWORD               (RX_FRAG_INFO_OFFSET_DWORD + NUM_OF_DWORDS_RX_FRAG_INFO)
#define RX_MSDU_START_OFFSET_DWORD               (RX_MPDU_START_OFFSET_DWORD + NUM_OF_DWORDS_RX_MPDU_START)
#define RX_MSDU_END_OFFSET_DWORD                 (RX_MSDU_START_OFFSET_DWORD + NUM_OF_DWORDS_RX_MSDU_START)
#define RX_MPDU_END_OFFSET_DWORD                 (RX_MSDU_END_OFFSET_DWORD + NUM_OF_DWORDS_RX_MSDU_END)
#define RX_PPDU_START_OFFSET_DWORD               (RX_MPDU_END_OFFSET_DWORD + NUM_OF_DWORDS_RX_MPDU_END)
#define RX_PPDU_END_OFFSET_DWORD                 (RX_PPDU_START_OFFSET_DWORD + NUM_OF_DWORDS_RX_PPDU_START)
#define RX_HDR_STATUS_OFFSET_DWORD               (RX_PPDU_END_OFFSET_DWORD + NUM_OF_DWORDS_RX_PPDU_END)
#if !defined(FW_AXI_MSI_ADDR)
#define FW_AXI_MSI_ADDR    ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(FW_AXI_MSI_DATA)
#define FW_AXI_MSI_DATA    ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(WLAN_SUBSYSTEM_CORE_ID_ADDRESS)
#define WLAN_SUBSYSTEM_CORE_ID_ADDRESS ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(FPGA_VERSION_ADDRESS)
#define FPGA_VERSION_ADDRESS    ATH_UNSUPPORTED_REG_OFFSET
#endif

#if !defined(SI_CONFIG_ADDRESS)
#define SI_CONFIG_ADDRESS ATH_UNSUPPORTED_REG_OFFSET
#define SI_CONFIG_BIDIR_OD_DATA_LSB 0
#define SI_CONFIG_BIDIR_OD_DATA_MASK 0
#define SI_CONFIG_I2C_LSB 0
#define SI_CONFIG_I2C_MASK 0
#define SI_CONFIG_POS_SAMPLE_LSB 0
#define SI_CONFIG_POS_SAMPLE_MASK 0
#define SI_CONFIG_INACTIVE_CLK_LSB 0
#define SI_CONFIG_INACTIVE_CLK_MASK 0
#define SI_CONFIG_INACTIVE_DATA_LSB 0
#define SI_CONFIG_INACTIVE_DATA_MASK 0
#define SI_CONFIG_DIVIDER_LSB 0
#define SI_CONFIG_DIVIDER_MASK 0
#define SI_CONFIG_OFFSET 0
#define SI_TX_DATA0_OFFSET ATH_UNSUPPORTED_REG_OFFSET
#define SI_TX_DATA1_OFFSET ATH_UNSUPPORTED_REG_OFFSET
#define SI_RX_DATA0_OFFSET ATH_UNSUPPORTED_REG_OFFSET
#define SI_RX_DATA1_OFFSET ATH_UNSUPPORTED_REG_OFFSET
#define SI_CS_OFFSET ATH_UNSUPPORTED_REG_OFFSET
#define SI_CS_DONE_ERR_MASK 0
#define SI_CS_DONE_INT_MASK 0
#define SI_CS_START_LSB 0
#define SI_CS_START_MASK 0
#define SI_CS_RX_CNT_LSB 0
#define SI_CS_RX_CNT_MASK 0
#define SI_CS_TX_CNT_LSB 0
#define SI_CS_TX_CNT_MASK 0
#endif

#ifndef SI_BASE_ADDRESS
#define SI_BASE_ADDRESS ATH_UNSUPPORTED_REG_OFFSET
#endif

#ifndef WLAN_GPIO_PIN10_ADDRESS
#define WLAN_GPIO_PIN10_ADDRESS ATH_UNSUPPORTED_REG_OFFSET
#endif

#ifndef WLAN_GPIO_PIN11_ADDRESS
#define WLAN_GPIO_PIN11_ADDRESS ATH_UNSUPPORTED_REG_OFFSET
#endif

#ifndef WLAN_GPIO_PIN12_ADDRESS
#define WLAN_GPIO_PIN12_ADDRESS ATH_UNSUPPORTED_REG_OFFSET
#endif

#ifndef WLAN_GPIO_PIN13_ADDRESS
#define WLAN_GPIO_PIN13_ADDRESS ATH_UNSUPPORTED_REG_OFFSET
#endif

#ifdef ATH_REG_TABLE_DIRECT_ASSIGN

static struct targetdef_s my_target_def = {
    RTC_SOC_BASE_ADDRESS,
    RTC_WMAC_BASE_ADDRESS,
    SYSTEM_SLEEP_OFFSET,
    WLAN_SYSTEM_SLEEP_OFFSET,
    WLAN_SYSTEM_SLEEP_DISABLE_LSB,
    WLAN_SYSTEM_SLEEP_DISABLE_MASK,
    CLOCK_CONTROL_OFFSET,
    CLOCK_CONTROL_SI0_CLK_MASK,
    SOC_RESET_CONTROL_OFFSET,
    RESET_CONTROL_SI0_RST_MASK,
    WLAN_RESET_CONTROL_OFFSET,
    WLAN_RESET_CONTROL_COLD_RST_MASK,
    WLAN_RESET_CONTROL_WARM_RST_MASK,
    GPIO_BASE_ADDRESS,
    GPIO_PIN0_OFFSET,
    GPIO_PIN1_OFFSET,
    GPIO_PIN0_CONFIG_MASK,
    GPIO_PIN1_CONFIG_MASK,
    SI_CONFIG_BIDIR_OD_DATA_LSB,
    SI_CONFIG_BIDIR_OD_DATA_MASK,
    SI_CONFIG_I2C_LSB,
    SI_CONFIG_I2C_MASK,
    SI_CONFIG_POS_SAMPLE_LSB,
    SI_CONFIG_POS_SAMPLE_MASK,
    SI_CONFIG_INACTIVE_CLK_LSB,
    SI_CONFIG_INACTIVE_CLK_MASK,
    SI_CONFIG_INACTIVE_DATA_LSB,
    SI_CONFIG_INACTIVE_DATA_MASK,
    SI_CONFIG_DIVIDER_LSB,
    SI_CONFIG_DIVIDER_MASK,
    SI_BASE_ADDRESS,
    SI_CONFIG_OFFSET,
    SI_TX_DATA0_OFFSET,
    SI_TX_DATA1_OFFSET,
    SI_RX_DATA0_OFFSET,
    SI_RX_DATA1_OFFSET,
    SI_CS_OFFSET,
    SI_CS_DONE_ERR_MASK,
    SI_CS_DONE_INT_MASK,
    SI_CS_START_LSB,
    SI_CS_START_MASK,
    SI_CS_RX_CNT_LSB,
    SI_CS_RX_CNT_MASK,
    SI_CS_TX_CNT_LSB,
    SI_CS_TX_CNT_MASK,
    MY_TARGET_BOARD_DATA_SZ,
    MY_TARGET_BOARD_EXT_DATA_SZ,
    MBOX_BASE_ADDRESS,
    LOCAL_SCRATCH_OFFSET,
    CPU_CLOCK_OFFSET,
    GPIO_PIN10_OFFSET,
    GPIO_PIN11_OFFSET,
    GPIO_PIN12_OFFSET,
    GPIO_PIN13_OFFSET,
    CLOCK_GPIO_OFFSET,
    CPU_CLOCK_STANDARD_LSB,
    CPU_CLOCK_STANDARD_MASK,
    LPO_CAL_ENABLE_LSB,
    LPO_CAL_ENABLE_MASK,
    CLOCK_GPIO_BT_CLK_OUT_EN_LSB,
    CLOCK_GPIO_BT_CLK_OUT_EN_MASK,
    ANALOG_INTF_BASE_ADDRESS,
    WLAN_MAC_BASE_ADDRESS,
    CE0_BASE_ADDRESS,
    CE1_BASE_ADDRESS,
    FW_INDICATOR_ADDRESS,
    FW_CPU_PLL_CONFIG,
    DRAM_BASE_ADDRESS,
    SOC_CORE_BASE_ADDRESS,
    CORE_CTRL_ADDRESS,
    CE_COUNT,
    MSI_NUM_REQUEST,
    MSI_ASSIGN_FW,
    MSI_ASSIGN_CE_INITIAL,
    PCIE_INTR_ENABLE_ADDRESS,
    PCIE_INTR_CLR_ADDRESS,
    PCIE_INTR_FIRMWARE_MASK,
    PCIE_INTR_CE_MASK_ALL,
    CORE_CTRL_CPU_INTR_MASK,
    WIFICMN_PCIE_BAR_REG_ADDRESS,
    /* htt_rx.c */
#if 0
    RX_FW_DESC_OFFSET_DWORD,
    RX_ATTENTION_OFFSET_DWORD,
    RX_FRAG_INFO_OFFSET_DWORD,
    RX_MPDU_START_OFFSET_DWORD,
    RX_MSDU_START_OFFSET_DWORD,
    RX_MSDU_END_OFFSET_DWORD,
    RX_MPDU_END_OFFSET_DWORD,
    RX_PPDU_START_OFFSET_DWORD,
    RX_PPDU_END_OFFSET_DWORD,
    RX_HDR_STATUS_OFFSET_DWORD,
    RX_MPDU_START_0_ENCRYPTED_MASK,
    RX_MPDU_START_0_ENCRYPTED_LSB,
    RX_MPDU_START_0_TO_DS_MASK,
    RX_MPDU_START_0_TO_DS_LSB,
    RX_MPDU_START_0_FR_DS_MASK,
    RX_MPDU_START_0_FR_DS_LSB,
    RX_MPDU_START_0_SEQ_NUM_MASK,
    RX_MPDU_START_0_SEQ_NUM_LSB,
    RX_MPDU_START_1_PN_31_0_MASK,
    RX_MPDU_START_1_PN_31_0_LSB,
    RX_MPDU_START_2_PN_47_32_LSB,
    RX_MPDU_START_2_PN_47_32_MASK,
    RX_MSDU_START_0_MSDU_LENGTH_MASK,
    RX_MSDU_START_0_MSDU_LENGTH_LSB,
    RX_MSDU_START_0_IP_OFFSET_MASK,
    RX_MSDU_START_0_IP_OFFSET_LSB,
    RX_MSDU_START_0_TCP_UDP_OFFSET_MASK,
    RX_MSDU_START_0_TCP_UDP_OFFSET_LSB,
    RX_MSDU_START_1_FLOW_ID_CRC_MASK,
    RX_MSDU_START_1_FLOW_ID_CRC_LSB,
    RX_MSDU_START_2_TCP_PROTO_MASK,
    RX_MSDU_START_2_TCP_PROTO_LSB,
    RX_MSDU_START_2_UDP_PROTO_MASK,
    RX_MSDU_START_2_UDP_PROTO_LSB,
    RX_MSDU_START_2_IP_FRAG_MASK,
    RX_MSDU_START_2_IP_FRAG_LSB,
    RX_MSDU_START_2_IPV6_PROTO_MASK,
    RX_MSDU_START_2_IPV6_PROTO_LSB,
    RX_MSDU_START_2_TCP_ONLY_ACK_MASK,
    RX_MSDU_START_2_TCP_ONLY_ACK_LSB,
    RX_MSDU_START_2_DECAP_FORMAT_OFFSET,
    RX_MSDU_START_2_DECAP_FORMAT_MASK,
    RX_MSDU_START_2_DECAP_FORMAT_LSB,
    RX_MSDU_END_0_TCP_UDP_CHKSUM_MASK,
    RX_MSDU_END_0_TCP_UDP_CHKSUM_LSB,
    RX_MSDU_END_1_EXT_WAPI_PN_63_48_MASK,
    RX_MSDU_END_1_EXT_WAPI_PN_63_48_LSB,
    RX_MSDU_END_2_EXT_WAPI_PN_95_64_MASK,
    RX_MSDU_END_2_EXT_WAPI_PN_95_64_LSB,
    RX_MSDU_END_3_EXT_WAPI_PN_127_96_MASK,
    RX_MSDU_END_3_EXT_WAPI_PN_127_96_LSB,
    RX_MSDU_END_4_FIRST_MSDU_MASK,
    RX_MSDU_END_4_FIRST_MSDU_LSB,
    RX_MSDU_END_4_LAST_MSDU_MASK,
    RX_MSDU_END_4_LAST_MSDU_LSB,
    RX_MSDU_END_8_LRO_ELIGIBLE_MASK,
    RX_MSDU_END_8_LRO_ELIGIBLE_LSB,
    RX_MSDU_END_8_L3_HEADER_PADDING_MASK,
    RX_MSDU_END_8_L3_HEADER_PADDING_LSB,
    RX_PPDU_START_4_RSSI_COMB_MASK,
    RX_PPDU_START_4_RSSI_COMB_LSB,
    RX_PPDU_START_5_PREAMBLE_TYPE_MASK,
    RX_PPDU_START_5_PREAMBLE_TYPE_LSB,
    RX_PPDU_START_5_L_SIG_RATE_MASK,
    RX_PPDU_START_5_L_SIG_RATE_LSB,
    RX_PPDU_START_5_L_SIG_RATE_SELECT_MASK,
    RX_PPDU_START_5_L_SIG_RATE_SELECT_LSB,
    RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_MASK,
    RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_LSB,
    RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_MASK,
    RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_LSB,
    RX_PPDU_START_8_VHT_SIG_B_MASK,
    RX_PPDU_START_8_VHT_SIG_B_LSB,
    RX_PPDU_START_9_SERVICE_MASK,
    RX_PPDU_START_9_SERVICE_LSB,
    RX_PPDU_END_16_TSF_TIMESTAMP_MASK,
    RX_PPDU_END_16_TSF_TIMESTAMP_LSB,
    RX_PPDU_END_ANTENNA_OFFSET_DWORD,
    RX_ATTENTION_0_FIRST_MPDU_MASK,
    RX_ATTENTION_0_FIRST_MPDU_LSB,
    RX_ATTENTION_0_LAST_MPDU_MASK,
    RX_ATTENTION_0_LAST_MPDU_LSB,
    RX_ATTENTION_0_MCAST_BCAST_MASK,
    RX_ATTENTION_0_MCAST_BCAST_LSB,
    RX_ATTENTION_0_FRAGMENT_MASK,
    RX_ATTENTION_0_FRAGMENT_LSB,
    RX_ATTENTION_0_MPDU_LENGTH_ERR_MASK,
    RX_ATTENTION_0_MORE_DATA_MASK,
    RX_ATTENTION_0_MSDU_DONE_MASK,
    RX_ATTENTION_0_TCP_UDP_CHKSUM_FAIL_MASK,
    RX_ATTENTION_0_FCS_ERR_MASK,
    RX_ATTENTION_0_MGMT_TYPE_MASK,
    RX_ATTENTION_0_PHY_DATA_TYPE_MASK,
    RX_FRAG_INFO_0_RING2_MORE_COUNT_MASK,
    RX_FRAG_INFO_0_RING2_MORE_COUNT_LSB,
#endif
    /* htt tx */
    MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_MASK,
    MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_MASK,
    MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_MASK,
    MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_MASK,
    MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_LSB,
    MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_LSB,
    MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_LSB,
    MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_LSB,
    /* copy_engine.c */
    DST_WR_INDEX_ADDRESS,
    SRC_WATERMARK_ADDRESS,
    SRC_WATERMARK_LOW_MASK,
    SRC_WATERMARK_HIGH_MASK,
    DST_WATERMARK_LOW_MASK,
    DST_WATERMARK_HIGH_MASK,
    CURRENT_SRRI_ADDRESS,
    CURRENT_DRRI_ADDRESS,
    HOST_IS_SRC_RING_HIGH_WATERMARK_MASK,
    HOST_IS_SRC_RING_LOW_WATERMARK_MASK,
    HOST_IS_DST_RING_HIGH_WATERMARK_MASK,
    HOST_IS_DST_RING_LOW_WATERMARK_MASK,
    HOST_IS_ADDRESS,
    HOST_IS_COPY_COMPLETE_MASK,
    CE_CMD_ADDRESS,
    CE_CMD_HALT_MASK,
    CE_WRAPPER_BASE_ADDRESS,
    CE_WRAPPER_INTERRUPT_SUMMARY_ADDRESS,
    HOST_IE_ADDRESS,
    HOST_IE_COPY_COMPLETE_MASK,
    SR_BA_ADDRESS,
    SR_SIZE_ADDRESS,
    CE_CTRL1_ADDRESS,
    CE_CTRL1_DMAX_LENGTH_MASK,
    DR_BA_ADDRESS,
    DR_SIZE_ADDRESS,
    MISC_IE_ADDRESS,
    MISC_IS_AXI_ERR_MASK,
    MISC_IS_DST_ADDR_ERR_MASK,
    MISC_IS_SRC_LEN_ERR_MASK,
    MISC_IS_DST_MAX_LEN_VIO_MASK,
    MISC_IS_DST_RING_OVERFLOW_MASK,
    MISC_IS_SRC_RING_OVERFLOW_MASK,
    SRC_WATERMARK_LOW_LSB,
    SRC_WATERMARK_HIGH_LSB,
    DST_WATERMARK_LOW_LSB,
    DST_WATERMARK_HIGH_LSB,
    CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_MASK,
    CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_LSB,
    CE_CTRL1_DMAX_LENGTH_LSB,
    CE_CTRL1_SRC_RING_BYTE_SWAP_EN_MASK,
    CE_CTRL1_DST_RING_BYTE_SWAP_EN_MASK,
    CE_CTRL1_SRC_RING_BYTE_SWAP_EN_LSB,
    CE_CTRL1_DST_RING_BYTE_SWAP_EN_LSB,
    CE_CMD_HALT_STATUS_MASK,
    CE_CMD_HALT_STATUS_LSB,
    SR_WR_INDEX_ADDRESS,
    DST_WATERMARK_ADDRESS,
#if 0
    CE_SRC_DESC_SIZE_DWORD,
    CE_DEST_DESC_SIZE_DWORD,
    CE_SRC_DESC_SRC_PTR_OFFSET_DWORD,
    CE_SRC_DESC_INFO_OFFSET_DWORD,
    CE_DEST_DESC_DEST_PTR_OFFSET_DWORD,
    CE_DEST_DESC_INFO_OFFSET_DWORD,
    CE_SRC_DESC_INFO_NBYTES_MASK,
    CE_SRC_DESC_INFO_NBYTES_SHIFT,
    CE_SRC_DESC_INFO_GATHER_MASK,
    CE_SRC_DESC_INFO_GATHER_SHIFT,
    CE_SRC_DESC_INFO_BYTE_SWAP_MASK,
    CE_SRC_DESC_INFO_BYTE_SWAP_SHIFT,
    CE_SRC_DESC_INFO_HOST_INT_DISABLE_MASK,
    CE_SRC_DESC_INFO_HOST_INT_DISABLE_SHIFT,
    CE_SRC_DESC_INFO_TARGET_INT_DISABLE_MASK,
    CE_SRC_DESC_INFO_TARGET_INT_DISABLE_SHIFT,
    CE_SRC_DESC_INFO_META_DATA_MASK,
    CE_SRC_DESC_INFO_META_DATA_SHIFT,
    CE_DEST_DESC_INFO_NBYTES_MASK,
    CE_DEST_DESC_INFO_NBYTES_SHIFT,
    CE_DEST_DESC_INFO_GATHER_MASK,
    CE_DEST_DESC_INFO_GATHER_SHIFT,
    CE_DEST_DESC_INFO_BYTE_SWAP_MASK,
    CE_DEST_DESC_INFO_BYTE_SWAP_SHIFT,
    CE_DEST_DESC_INFO_HOST_INT_DISABLE_MASK,
    CE_DEST_DESC_INFO_HOST_INT_DISABLE_SHIFT,
    CE_DEST_DESC_INFO_TARGET_INT_DISABLE_MASK,
    CE_DEST_DESC_INFO_TARGET_INT_DISABLE_SHIFT,
    CE_DEST_DESC_INFO_META_DATA_MASK,
    CE_DEST_DESC_INFO_META_DATA_SHIFT,
#endif
    PCIE_INTR_CAUSE_ADDRESS,
    SOC_RESET_CONTROL_ADDRESS,
    SOC_RESET_CONTROL_CE_RST_MASK,
    SOC_RESET_CONTROL_CPU_WARM_RST_MASK,
    CPU_INTR_ADDRESS,
    SOC_LF_TIMER_CONTROL0_ADDRESS,
    SOC_LF_TIMER_CONTROL0_ENABLE_MASK,
    SI_CONFIG_ERR_INT_MASK,
    SI_CONFIG_ERR_INT_LSB,
    GPIO_ENABLE_W1TS_LOW_ADDRESS,
    GPIO_PIN0_CONFIG_LSB,
    GPIO_PIN0_PAD_PULL_LSB,
    GPIO_PIN0_PAD_PULL_MASK,
    SOC_CHIP_ID_ADDRESS,
    SOC_CHIP_ID_REVISION_MASK,
    SOC_CHIP_ID_REVISION_LSB,
    SOC_CHIP_ID_REVISION_MSB,

    WIFICMN_PCIE_BAR_REG_ADDRESS,
    FW_AXI_MSI_ADDR,
    FW_AXI_MSI_DATA,
    WLAN_SUBSYSTEM_CORE_ID_ADDRESS,
    WIFICMN_INT_STATUS_ADDRESS;
};

#else

static struct targetdef_s my_target_def = {
    .d_RTC_SOC_BASE_ADDRESS = RTC_SOC_BASE_ADDRESS,
    .d_RTC_WMAC_BASE_ADDRESS = RTC_WMAC_BASE_ADDRESS,
    .d_SYSTEM_SLEEP_OFFSET = WLAN_SYSTEM_SLEEP_OFFSET,
    .d_WLAN_SYSTEM_SLEEP_OFFSET = WLAN_SYSTEM_SLEEP_OFFSET,
    .d_WLAN_SYSTEM_SLEEP_DISABLE_LSB = WLAN_SYSTEM_SLEEP_DISABLE_LSB,
    .d_WLAN_SYSTEM_SLEEP_DISABLE_MASK = WLAN_SYSTEM_SLEEP_DISABLE_MASK,
    .d_CLOCK_CONTROL_OFFSET = CLOCK_CONTROL_OFFSET,
    .d_CLOCK_CONTROL_SI0_CLK_MASK = CLOCK_CONTROL_SI0_CLK_MASK,
    .d_RESET_CONTROL_OFFSET = SOC_RESET_CONTROL_OFFSET,
    .d_RESET_CONTROL_SI0_RST_MASK = RESET_CONTROL_SI0_RST_MASK,
    .d_WLAN_RESET_CONTROL_OFFSET = WLAN_RESET_CONTROL_OFFSET,
    .d_WLAN_RESET_CONTROL_COLD_RST_MASK = WLAN_RESET_CONTROL_COLD_RST_MASK,
    .d_WLAN_RESET_CONTROL_WARM_RST_MASK = WLAN_RESET_CONTROL_WARM_RST_MASK,
    .d_GPIO_BASE_ADDRESS = GPIO_BASE_ADDRESS,
    .d_GPIO_PIN0_OFFSET = GPIO_PIN0_OFFSET,
    .d_GPIO_PIN1_OFFSET = GPIO_PIN1_OFFSET,
    .d_GPIO_PIN0_CONFIG_MASK = GPIO_PIN0_CONFIG_MASK,
    .d_GPIO_PIN1_CONFIG_MASK = GPIO_PIN1_CONFIG_MASK,
    .d_SI_CONFIG_BIDIR_OD_DATA_LSB = SI_CONFIG_BIDIR_OD_DATA_LSB,
    .d_SI_CONFIG_BIDIR_OD_DATA_MASK = SI_CONFIG_BIDIR_OD_DATA_MASK,
    .d_SI_CONFIG_I2C_LSB = SI_CONFIG_I2C_LSB,
    .d_SI_CONFIG_I2C_MASK = SI_CONFIG_I2C_MASK,
    .d_SI_CONFIG_POS_SAMPLE_LSB = SI_CONFIG_POS_SAMPLE_LSB,
    .d_SI_CONFIG_POS_SAMPLE_MASK = SI_CONFIG_POS_SAMPLE_MASK,
    .d_SI_CONFIG_INACTIVE_CLK_LSB = SI_CONFIG_INACTIVE_CLK_LSB,
    .d_SI_CONFIG_INACTIVE_CLK_MASK = SI_CONFIG_INACTIVE_CLK_MASK,
    .d_SI_CONFIG_INACTIVE_DATA_LSB = SI_CONFIG_INACTIVE_DATA_LSB,
    .d_SI_CONFIG_INACTIVE_DATA_MASK = SI_CONFIG_INACTIVE_DATA_MASK,
    .d_SI_CONFIG_DIVIDER_LSB = SI_CONFIG_DIVIDER_LSB,
    .d_SI_CONFIG_DIVIDER_MASK = SI_CONFIG_DIVIDER_MASK,
    .d_SI_BASE_ADDRESS = SI_BASE_ADDRESS,
    .d_SI_CONFIG_OFFSET = SI_CONFIG_OFFSET,
    .d_SI_TX_DATA0_OFFSET = SI_TX_DATA0_OFFSET,
    .d_SI_TX_DATA1_OFFSET = SI_TX_DATA1_OFFSET,
    .d_SI_RX_DATA0_OFFSET = SI_RX_DATA0_OFFSET,
    .d_SI_RX_DATA1_OFFSET = SI_RX_DATA1_OFFSET,
    .d_SI_CS_OFFSET = SI_CS_OFFSET,
    .d_SI_CS_DONE_ERR_MASK = SI_CS_DONE_ERR_MASK,
    .d_SI_CS_DONE_INT_MASK = SI_CS_DONE_INT_MASK,
    .d_SI_CS_START_LSB = SI_CS_START_LSB,
    .d_SI_CS_START_MASK = SI_CS_START_MASK,
    .d_SI_CS_RX_CNT_LSB = SI_CS_RX_CNT_LSB,
    .d_SI_CS_RX_CNT_MASK = SI_CS_RX_CNT_MASK,
    .d_SI_CS_TX_CNT_LSB = SI_CS_TX_CNT_LSB,
    .d_SI_CS_TX_CNT_MASK = SI_CS_TX_CNT_MASK,
    .d_BOARD_DATA_SZ = MY_TARGET_BOARD_DATA_SZ,
    .d_BOARD_EXT_DATA_SZ = MY_TARGET_BOARD_EXT_DATA_SZ,
    .d_MBOX_BASE_ADDRESS = MBOX_BASE_ADDRESS,
    .d_LOCAL_SCRATCH_OFFSET = LOCAL_SCRATCH_OFFSET,
    .d_CPU_CLOCK_OFFSET = CPU_CLOCK_OFFSET,
    .d_GPIO_PIN10_OFFSET = GPIO_PIN10_OFFSET,
    .d_GPIO_PIN11_OFFSET = GPIO_PIN11_OFFSET,
    .d_GPIO_PIN12_OFFSET = GPIO_PIN12_OFFSET,
    .d_GPIO_PIN13_OFFSET = GPIO_PIN13_OFFSET,
    .d_CLOCK_GPIO_OFFSET = CLOCK_GPIO_OFFSET,
    .d_CPU_CLOCK_STANDARD_LSB = CPU_CLOCK_STANDARD_LSB,
    .d_CPU_CLOCK_STANDARD_MASK = CPU_CLOCK_STANDARD_MASK,
    .d_LPO_CAL_ENABLE_LSB = LPO_CAL_ENABLE_LSB,
    .d_LPO_CAL_ENABLE_MASK = LPO_CAL_ENABLE_MASK,
    .d_CLOCK_GPIO_BT_CLK_OUT_EN_LSB = CLOCK_GPIO_BT_CLK_OUT_EN_LSB,
    .d_CLOCK_GPIO_BT_CLK_OUT_EN_MASK = CLOCK_GPIO_BT_CLK_OUT_EN_MASK,
    .d_ANALOG_INTF_BASE_ADDRESS = ANALOG_INTF_BASE_ADDRESS,
    .d_WLAN_MAC_BASE_ADDRESS = WLAN_MAC_BASE_ADDRESS,
    .d_CE0_BASE_ADDRESS = CE0_BASE_ADDRESS,
    .d_CE1_BASE_ADDRESS = CE1_BASE_ADDRESS,
    .d_FW_INDICATOR_ADDRESS = FW_INDICATOR_ADDRESS,
    .d_FW_CPU_PLL_CONFIG = FW_CPU_PLL_CONFIG,
    .d_DRAM_BASE_ADDRESS = DRAM_BASE_ADDRESS,
    .d_SOC_CORE_BASE_ADDRESS = SOC_CORE_BASE_ADDRESS,
    .d_CORE_CTRL_ADDRESS = CORE_CTRL_ADDRESS,
    .d_CE_COUNT = CE_COUNT,
    .d_MSI_NUM_REQUEST = MSI_NUM_REQUEST,
    .d_MSI_ASSIGN_FW = MSI_ASSIGN_FW,
    .d_MSI_ASSIGN_CE_INITIAL = MSI_ASSIGN_CE_INITIAL,
    .d_PCIE_INTR_ENABLE_ADDRESS = PCIE_INTR_ENABLE_ADDRESS,
    .d_PCIE_INTR_CLR_ADDRESS = PCIE_INTR_CLR_ADDRESS,
    .d_PCIE_INTR_FIRMWARE_MASK = PCIE_INTR_FIRMWARE_MASK,
    .d_PCIE_INTR_CE_MASK_ALL = PCIE_INTR_CE_MASK_ALL,
    .d_CORE_CTRL_CPU_INTR_MASK = CORE_CTRL_CPU_INTR_MASK,
    .d_WIFICMN_PCIE_BAR_REG_ADDRESS = WIFICMN_PCIE_BAR_REG_ADDRESS,
    /* htt_rx.c */
#if 0
    .d_RX_FW_DESC_OFFSET_DWORD = RX_FW_DESC_OFFSET_DWORD,
    .d_RX_ATTENTION_OFFSET_DWORD = RX_ATTENTION_OFFSET_DWORD,
    .d_RX_FRAG_INFO_OFFSET_DWORD = RX_FRAG_INFO_OFFSET_DWORD,
    .d_RX_MPDU_START_OFFSET_DWORD = RX_MPDU_START_OFFSET_DWORD,
    .d_RX_MSDU_START_OFFSET_DWORD = RX_MSDU_START_OFFSET_DWORD,
    .d_RX_MSDU_END_OFFSET_DWORD = RX_MSDU_END_OFFSET_DWORD,
    .d_RX_MPDU_END_OFFSET_DWORD = RX_MPDU_END_OFFSET_DWORD,
    .d_RX_PPDU_START_OFFSET_DWORD = RX_PPDU_START_OFFSET_DWORD,
    .d_RX_PPDU_END_OFFSET_DWORD = RX_PPDU_END_OFFSET_DWORD,
    .d_RX_HDR_STATUS_OFFSET_DWORD = RX_HDR_STATUS_OFFSET_DWORD,
    .d_RX_MPDU_START_0_ENCRYPTED_MASK = RX_MPDU_START_0_ENCRYPTED_MASK,
    .d_RX_MPDU_START_0_ENCRYPTED_LSB = RX_MPDU_START_0_ENCRYPTED_LSB,
    .d_RX_MPDU_START_0_TO_DS_MASK = RX_MPDU_START_0_TO_DS_MASK,
    .d_RX_MPDU_START_0_TO_DS_LSB = RX_MPDU_START_0_TO_DS_LSB,
    .d_RX_MPDU_START_0_FR_DS_MASK = RX_MPDU_START_0_FR_DS_MASK,
    .d_RX_MPDU_START_0_FR_DS_LSB = RX_MPDU_START_0_FR_DS_LSB,
    .d_RX_MPDU_START_0_SEQ_NUM_MASK = RX_MPDU_START_0_SEQ_NUM_MASK,
    .d_RX_MPDU_START_0_SEQ_NUM_LSB = RX_MPDU_START_0_SEQ_NUM_LSB,
    .d_RX_MPDU_START_1_PN_31_0_MASK = RX_MPDU_START_1_PN_31_0_MASK,
    .d_RX_MPDU_START_1_PN_31_0_LSB = RX_MPDU_START_1_PN_31_0_LSB,
    .d_RX_MPDU_START_2_PN_47_32_LSB = RX_MPDU_START_2_PN_47_32_LSB,
    .d_RX_MPDU_START_2_PN_47_32_MASK = RX_MPDU_START_2_PN_47_32_MASK,
    .d_RX_MSDU_START_0_MSDU_LENGTH_MASK = RX_MSDU_START_0_MSDU_LENGTH_MASK,
    .d_RX_MSDU_START_0_MSDU_LENGTH_LSB = RX_MSDU_START_0_MSDU_LENGTH_LSB,
    .d_RX_MSDU_START_0_IP_OFFSET_MASK = RX_MSDU_START_0_IP_OFFSET_MASK,
    .d_RX_MSDU_START_0_IP_OFFSET_LSB = RX_MSDU_START_0_IP_OFFSET_LSB,
    .d_RX_MSDU_START_0_TCP_UDP_OFFSET_MASK = RX_MSDU_START_0_TCP_UDP_OFFSET_MASK,
    .d_RX_MSDU_START_0_TCP_UDP_OFFSET_LSB = RX_MSDU_START_0_TCP_UDP_OFFSET_LSB,
    .d_RX_MSDU_START_1_FLOW_ID_CRC_MASK = RX_MSDU_START_1_FLOW_ID_CRC_MASK,
    .d_RX_MSDU_START_1_FLOW_ID_CRC_LSB = RX_MSDU_START_1_FLOW_ID_CRC_LSB,
    .d_RX_MSDU_START_2_TCP_PROTO_MASK = RX_MSDU_START_2_TCP_PROTO_MASK,
    .d_RX_MSDU_START_2_TCP_PROTO_LSB = RX_MSDU_START_2_TCP_PROTO_LSB,
    .d_RX_MSDU_START_2_UDP_PROTO_MASK = RX_MSDU_START_2_UDP_PROTO_MASK,
    .d_RX_MSDU_START_2_UDP_PROTO_LSB = RX_MSDU_START_2_UDP_PROTO_LSB,
    .d_RX_MSDU_START_2_IP_FRAG_MASK = RX_MSDU_START_2_IP_FRAG_MASK,
    .d_RX_MSDU_START_2_IP_FRAG_LSB = RX_MSDU_START_2_IP_FRAG_LSB,
    .d_RX_MSDU_START_2_IPV6_PROTO_MASK = RX_MSDU_START_2_IPV6_PROTO_MASK,
    .d_RX_MSDU_START_2_IPV6_PROTO_LSB = RX_MSDU_START_2_IPV6_PROTO_LSB,
    .d_RX_MSDU_START_2_TCP_ONLY_ACK_MASK = RX_MSDU_START_2_TCP_ONLY_ACK_MASK,
    .d_RX_MSDU_START_2_TCP_ONLY_ACK_LSB = RX_MSDU_START_2_TCP_ONLY_ACK_LSB,
    .d_RX_MSDU_START_2_DECAP_FORMAT_OFFSET = RX_MSDU_START_2_DECAP_FORMAT_OFFSET,
    .d_RX_MSDU_START_2_DECAP_FORMAT_MASK = RX_MSDU_START_2_DECAP_FORMAT_MASK,
    .d_RX_MSDU_START_2_DECAP_FORMAT_LSB = RX_MSDU_START_2_DECAP_FORMAT_LSB,
    .d_RX_MSDU_END_0_TCP_UDP_CHKSUM_MASK = RX_MSDU_END_0_TCP_UDP_CHKSUM_MASK,
    .d_RX_MSDU_END_0_TCP_UDP_CHKSUM_LSB = RX_MSDU_END_0_TCP_UDP_CHKSUM_LSB,
    .d_RX_MSDU_END_1_EXT_WAPI_PN_63_48_MASK = RX_MSDU_END_1_EXT_WAPI_PN_63_48_MASK,
    .d_RX_MSDU_END_1_EXT_WAPI_PN_63_48_LSB = RX_MSDU_END_1_EXT_WAPI_PN_63_48_LSB,
    .d_RX_MSDU_END_2_EXT_WAPI_PN_95_64_MASK = RX_MSDU_END_2_EXT_WAPI_PN_95_64_MASK,
    .d_RX_MSDU_END_2_EXT_WAPI_PN_95_64_LSB = RX_MSDU_END_2_EXT_WAPI_PN_95_64_LSB,
    .d_RX_MSDU_END_3_EXT_WAPI_PN_127_96_MASK = RX_MSDU_END_3_EXT_WAPI_PN_127_96_MASK,
    .d_RX_MSDU_END_3_EXT_WAPI_PN_127_96_LSB = RX_MSDU_END_3_EXT_WAPI_PN_127_96_LSB,
    .d_RX_MSDU_END_4_FIRST_MSDU_MASK = RX_MSDU_END_4_FIRST_MSDU_MASK,
    .d_RX_MSDU_END_4_FIRST_MSDU_LSB = RX_MSDU_END_4_FIRST_MSDU_LSB,
    .d_RX_MSDU_END_4_LAST_MSDU_MASK = RX_MSDU_END_4_LAST_MSDU_MASK,
    .d_RX_MSDU_END_4_LAST_MSDU_LSB = RX_MSDU_END_4_LAST_MSDU_LSB,
    .d_RX_MSDU_END_8_LRO_ELIGIBLE_MASK = RX_MSDU_END_8_LRO_ELIGIBLE_MASK,
    .d_RX_MSDU_END_8_LRO_ELIGIBLE_LSB = RX_MSDU_END_8_LRO_ELIGIBLE_LSB,
    .d_RX_MSDU_END_8_L3_HEADER_PADDING_MASK = RX_MSDU_END_8_L3_HEADER_PADDING_MASK,
    .d_RX_MSDU_END_8_L3_HEADER_PADDING_LSB = RX_MSDU_END_8_L3_HEADER_PADDING_LSB,
    .d_RX_PPDU_START_4_RSSI_COMB_MASK = RX_PPDU_START_4_RSSI_COMB_MASK,
    .d_RX_PPDU_START_4_RSSI_COMB_LSB = RX_PPDU_START_4_RSSI_COMB_LSB,
    .d_RX_PPDU_START_5_PREAMBLE_TYPE_MASK = RX_PPDU_START_5_PREAMBLE_TYPE_MASK,
    .d_RX_PPDU_START_5_PREAMBLE_TYPE_LSB = RX_PPDU_START_5_PREAMBLE_TYPE_LSB,
    .d_RX_PPDU_START_5_L_SIG_RATE_MASK = RX_PPDU_START_5_L_SIG_RATE_MASK,
    .d_RX_PPDU_START_5_L_SIG_RATE_LSB = RX_PPDU_START_5_L_SIG_RATE_LSB,
    .d_RX_PPDU_START_5_L_SIG_RATE_SELECT_MASK = RX_PPDU_START_5_L_SIG_RATE_SELECT_MASK,
    .d_RX_PPDU_START_5_L_SIG_RATE_SELECT_LSB = RX_PPDU_START_5_L_SIG_RATE_SELECT_LSB,
    .d_RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_MASK = RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_MASK,
    .d_RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_LSB = RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_LSB,
    .d_RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_MASK = RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_MASK,
    .d_RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_LSB = RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_LSB,
    .d_RX_PPDU_START_8_VHT_SIG_B_MASK = RX_PPDU_START_8_VHT_SIG_B_MASK,
    .d_RX_PPDU_START_8_VHT_SIG_B_LSB = RX_PPDU_START_8_VHT_SIG_B_LSB,
    .d_RX_PPDU_START_9_SERVICE_MASK = RX_PPDU_START_9_SERVICE_MASK,
    .d_RX_PPDU_START_9_SERVICE_LSB = RX_PPDU_START_9_SERVICE_LSB,
    .d_RX_PPDU_END_16_TSF_TIMESTAMP_MASK = RX_PPDU_END_16_TSF_TIMESTAMP_MASK,
    .d_RX_PPDU_END_16_TSF_TIMESTAMP_LSB = RX_PPDU_END_16_TSF_TIMESTAMP_LSB,
    .d_RX_PPDU_END_ANTENNA_OFFSET = RX_PPDU_END_ANTENNA_OFFSET_DWORD,
    .d_RX_ATTENTION_0_FIRST_MPDU_MASK = RX_ATTENTION_0_FIRST_MPDU_MASK,
    .d_RX_ATTENTION_0_FIRST_MPDU_LSB = RX_ATTENTION_0_FIRST_MPDU_LSB,
    .d_RX_ATTENTION_0_LAST_MPDU_MASK = RX_ATTENTION_0_LAST_MPDU_MASK,
    .d_RX_ATTENTION_0_LAST_MPDU_LSB = RX_ATTENTION_0_LAST_MPDU_LSB,
    .d_RX_ATTENTION_0_MCAST_BCAST_MASK = RX_ATTENTION_0_MCAST_BCAST_MASK,
    .d_RX_ATTENTION_0_MCAST_BCAST_LSB = RX_ATTENTION_0_MCAST_BCAST_LSB,
    .d_RX_ATTENTION_0_FRAGMENT_MASK = RX_ATTENTION_0_FRAGMENT_MASK,
    .d_RX_ATTENTION_0_FRAGMENT_LSB = RX_ATTENTION_0_FRAGMENT_LSB,
    .d_RX_ATTENTION_0_MPDU_LENGTH_ERR_MASK = RX_ATTENTION_0_MPDU_LENGTH_ERR_MASK,
    .d_RX_ATTENTION_0_MORE_DATA_MASK = RX_ATTENTION_0_MORE_DATA_MASK,
    .d_RX_ATTENTION_0_MSDU_DONE_MASK = RX_ATTENTION_0_MSDU_DONE_MASK,
    .d_RX_ATTENTION_0_TCP_UDP_CHKSUM_FAIL_MASK = RX_ATTENTION_0_TCP_UDP_CHKSUM_FAIL_MASK,
    .d_RX_ATTENTION_0_FCS_ERR_MASK = RX_ATTENTION_0_FCS_ERR_MASK,
    .d_RX_ATTENTION_0_MGMT_TYPE_MASK = RX_ATTENTION_0_MGMT_TYPE_MASK,
    .d_RX_ATTENTION_0_PHY_DATA_TYPE_MASK = RX_ATTENTION_0_PHY_DATA_TYPE_MASK,
    .d_RX_FRAG_INFO_0_RING2_MORE_COUNT_MASK = RX_FRAG_INFO_0_RING2_MORE_COUNT_MASK,
    .d_RX_FRAG_INFO_0_RING2_MORE_COUNT_LSB = RX_FRAG_INFO_0_RING2_MORE_COUNT_LSB,
#endif
    /* htt tx */
    .d_MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_MASK = MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_MASK,
    .d_MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_MASK = MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_MASK,
    .d_MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_MASK = MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_MASK,
    .d_MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_MASK = MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_MASK,
    .d_MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_LSB = MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_LSB,
    .d_MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_LSB = MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_LSB,
    .d_MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_LSB = MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_LSB,
    .d_MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_LSB = MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_LSB,
    /* copy_engine.c  */
    .d_DST_WR_INDEX_ADDRESS = DST_WR_INDEX_ADDRESS,
    .d_SRC_WATERMARK_ADDRESS = SRC_WATERMARK_ADDRESS,
    .d_SRC_WATERMARK_LOW_MASK = SRC_WATERMARK_LOW_MASK,
    .d_SRC_WATERMARK_HIGH_MASK = SRC_WATERMARK_HIGH_MASK,
    .d_DST_WATERMARK_LOW_MASK = DST_WATERMARK_LOW_MASK,
    .d_DST_WATERMARK_HIGH_MASK = DST_WATERMARK_HIGH_MASK,
    .d_CURRENT_SRRI_ADDRESS = CURRENT_SRRI_ADDRESS,
    .d_CURRENT_DRRI_ADDRESS = CURRENT_DRRI_ADDRESS,
    .d_HOST_IS_SRC_RING_HIGH_WATERMARK_MASK = HOST_IS_SRC_RING_HIGH_WATERMARK_MASK,
    .d_HOST_IS_SRC_RING_LOW_WATERMARK_MASK = HOST_IS_SRC_RING_LOW_WATERMARK_MASK,
    .d_HOST_IS_DST_RING_HIGH_WATERMARK_MASK = HOST_IS_DST_RING_HIGH_WATERMARK_MASK,
    .d_HOST_IS_DST_RING_LOW_WATERMARK_MASK = HOST_IS_DST_RING_LOW_WATERMARK_MASK,
    .d_HOST_IS_ADDRESS = HOST_IS_ADDRESS,
    .d_HOST_IS_COPY_COMPLETE_MASK = HOST_IS_COPY_COMPLETE_MASK,
    .d_CE_CMD_ADDRESS = CE_CMD_ADDRESS,
    .d_CE_CMD_HALT_MASK = CE_CMD_HALT_MASK,
    .d_CE_WRAPPER_BASE_ADDRESS = CE_WRAPPER_BASE_ADDRESS,
    .d_CE_WRAPPER_INTERRUPT_SUMMARY_ADDRESS = CE_WRAPPER_INTERRUPT_SUMMARY_ADDRESS,
    .d_HOST_IE_ADDRESS = HOST_IE_ADDRESS,
    .d_HOST_IE_COPY_COMPLETE_MASK = HOST_IE_COPY_COMPLETE_MASK,
    .d_SR_BA_ADDRESS = SR_BA_ADDRESS,
    .d_SR_SIZE_ADDRESS = SR_SIZE_ADDRESS,
    .d_CE_CTRL1_ADDRESS = CE_CTRL1_ADDRESS,
    .d_CE_CTRL1_DMAX_LENGTH_MASK = CE_CTRL1_DMAX_LENGTH_MASK,
    .d_DR_BA_ADDRESS = DR_BA_ADDRESS,
    .d_DR_SIZE_ADDRESS = DR_SIZE_ADDRESS,
    .d_MISC_IE_ADDRESS = MISC_IE_ADDRESS,
    .d_MISC_IS_AXI_ERR_MASK = MISC_IS_AXI_ERR_MASK,
    .d_MISC_IS_DST_ADDR_ERR_MASK = MISC_IS_DST_ADDR_ERR_MASK,
    .d_MISC_IS_SRC_LEN_ERR_MASK = MISC_IS_SRC_LEN_ERR_MASK,
    .d_MISC_IS_DST_MAX_LEN_VIO_MASK = MISC_IS_DST_MAX_LEN_VIO_MASK,
    .d_MISC_IS_DST_RING_OVERFLOW_MASK = MISC_IS_DST_RING_OVERFLOW_MASK,
    .d_MISC_IS_SRC_RING_OVERFLOW_MASK = MISC_IS_SRC_RING_OVERFLOW_MASK,
    .d_SRC_WATERMARK_LOW_LSB = SRC_WATERMARK_LOW_LSB,
    .d_SRC_WATERMARK_HIGH_LSB = SRC_WATERMARK_HIGH_LSB,
    .d_DST_WATERMARK_LOW_LSB = DST_WATERMARK_LOW_LSB,
    .d_DST_WATERMARK_HIGH_LSB = DST_WATERMARK_HIGH_LSB,
    .d_CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_MASK = CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_MASK,
    .d_CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_LSB = CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_LSB,
    .d_CE_CTRL1_DMAX_LENGTH_LSB = CE_CTRL1_DMAX_LENGTH_LSB,
    .d_CE_CTRL1_SRC_RING_BYTE_SWAP_EN_MASK = CE_CTRL1_SRC_RING_BYTE_SWAP_EN_MASK,
    .d_CE_CTRL1_DST_RING_BYTE_SWAP_EN_MASK = CE_CTRL1_DST_RING_BYTE_SWAP_EN_MASK,
    .d_CE_CTRL1_SRC_RING_BYTE_SWAP_EN_LSB = CE_CTRL1_SRC_RING_BYTE_SWAP_EN_LSB,
    .d_CE_CTRL1_DST_RING_BYTE_SWAP_EN_LSB = CE_CTRL1_DST_RING_BYTE_SWAP_EN_LSB,
    .d_CE_CMD_HALT_STATUS_MASK = CE_CMD_HALT_STATUS_MASK,
    .d_CE_CMD_HALT_STATUS_LSB = CE_CMD_HALT_STATUS_LSB,
    .d_SR_WR_INDEX_ADDRESS = SR_WR_INDEX_ADDRESS,
    .d_DST_WATERMARK_ADDRESS = DST_WATERMARK_ADDRESS,
#if 0
    .d_CE_SRC_DESC_SIZE_DWORD = CE_SRC_DESC_SIZE_DWORD,
    .d_CE_DEST_DESC_SIZE_DWORD = CE_DEST_DESC_SIZE_DWORD,
    .d_CE_SRC_DESC_SRC_PTR_OFFSET_DWORD = CE_SRC_DESC_SRC_PTR_OFFSET_DWORD,
    .d_CE_SRC_DESC_INFO_OFFSET_DWORD = CE_SRC_DESC_INFO_OFFSET_DWORD,
    .d_CE_DEST_DESC_DEST_PTR_OFFSET_DWORD = CE_DEST_DESC_DEST_PTR_OFFSET_DWORD,
    .d_CE_DEST_DESC_INFO_OFFSET_DWORD = CE_DEST_DESC_INFO_OFFSET_DWORD,
    .d_CE_SRC_DESC_INFO_NBYTES_MASK = CE_SRC_DESC_INFO_NBYTES_MASK,
    .d_CE_SRC_DESC_INFO_NBYTES_SHIFT = CE_SRC_DESC_INFO_NBYTES_SHIFT,
    .d_CE_SRC_DESC_INFO_GATHER_MASK = CE_SRC_DESC_INFO_GATHER_MASK,
    .d_CE_SRC_DESC_INFO_GATHER_SHIFT = CE_SRC_DESC_INFO_GATHER_SHIFT,
    .d_CE_SRC_DESC_INFO_BYTE_SWAP_MASK = CE_SRC_DESC_INFO_BYTE_SWAP_MASK,
    .d_CE_SRC_DESC_INFO_BYTE_SWAP_SHIFT = CE_SRC_DESC_INFO_BYTE_SWAP_SHIFT,
    .d_CE_SRC_DESC_INFO_HOST_INT_DISABLE_MASK = CE_SRC_DESC_INFO_HOST_INT_DISABLE_MASK,
    .d_CE_SRC_DESC_INFO_HOST_INT_DISABLE_SHIFT = CE_SRC_DESC_INFO_HOST_INT_DISABLE_SHIFT,
    .d_CE_SRC_DESC_INFO_TARGET_INT_DISABLE_MASK = CE_SRC_DESC_INFO_TARGET_INT_DISABLE_MASK,
    .d_CE_SRC_DESC_INFO_TARGET_INT_DISABLE_SHIFT = CE_SRC_DESC_INFO_TARGET_INT_DISABLE_SHIFT,
    .d_CE_SRC_DESC_INFO_META_DATA_MASK = CE_SRC_DESC_INFO_META_DATA_MASK,
    .d_CE_SRC_DESC_INFO_META_DATA_SHIFT = CE_SRC_DESC_INFO_META_DATA_SHIFT,
    .d_CE_DEST_DESC_INFO_NBYTES_MASK = CE_DEST_DESC_INFO_NBYTES_MASK,
    .d_CE_DEST_DESC_INFO_NBYTES_SHIFT = CE_DEST_DESC_INFO_NBYTES_SHIFT,
    .d_CE_DEST_DESC_INFO_GATHER_MASK = CE_DEST_DESC_INFO_GATHER_MASK,
    .d_CE_DEST_DESC_INFO_GATHER_SHIFT = CE_DEST_DESC_INFO_GATHER_SHIFT,
    .d_CE_DEST_DESC_INFO_BYTE_SWAP_MASK = CE_DEST_DESC_INFO_BYTE_SWAP_MASK,
    .d_CE_DEST_DESC_INFO_BYTE_SWAP_SHIFT = CE_DEST_DESC_INFO_BYTE_SWAP_SHIFT,
    .d_CE_DEST_DESC_INFO_HOST_INT_DISABLE_MASK = CE_DEST_DESC_INFO_HOST_INT_DISABLE_MASK,
    .d_CE_DEST_DESC_INFO_HOST_INT_DISABLE_SHIFT = CE_DEST_DESC_INFO_HOST_INT_DISABLE_SHIFT,
    .d_CE_DEST_DESC_INFO_TARGET_INT_DISABLE_MASK = CE_DEST_DESC_INFO_TARGET_INT_DISABLE_MASK,
    .d_CE_DEST_DESC_INFO_TARGET_INT_DISABLE_SHIFT = CE_DEST_DESC_INFO_TARGET_INT_DISABLE_SHIFT,
    .d_CE_DEST_DESC_INFO_META_DATA_MASK = CE_DEST_DESC_INFO_META_DATA_MASK,
    .d_CE_DEST_DESC_INFO_META_DATA_SHIFT = CE_DEST_DESC_INFO_META_DATA_SHIFT,
#endif
    .d_PCIE_INTR_CAUSE_ADDRESS = PCIE_INTR_CAUSE_ADDRESS,
    .d_SOC_RESET_CONTROL_ADDRESS = SOC_RESET_CONTROL_ADDRESS,
    .d_SOC_RESET_CONTROL_CE_RST_MASK = SOC_RESET_CONTROL_CE_RST_MASK,
    .d_SOC_RESET_CONTROL_CPU_WARM_RST_MASK = SOC_RESET_CONTROL_CPU_WARM_RST_MASK,
    .d_CPU_INTR_ADDRESS = CPU_INTR_ADDRESS,
    .d_SOC_LF_TIMER_CONTROL0_ADDRESS = SOC_LF_TIMER_CONTROL0_ADDRESS,
    .d_SOC_LF_TIMER_CONTROL0_ENABLE_MASK = SOC_LF_TIMER_CONTROL0_ENABLE_MASK,

    .d_SI_CONFIG_ERR_INT_MASK = SI_CONFIG_ERR_INT_MASK,
    .d_SI_CONFIG_ERR_INT_LSB = SI_CONFIG_ERR_INT_LSB,
    .d_GPIO_ENABLE_W1TS_LOW_ADDRESS = GPIO_ENABLE_W1TS_LOW_ADDRESS,
    .d_GPIO_PIN0_CONFIG_LSB = GPIO_PIN0_CONFIG_LSB,
    .d_GPIO_PIN0_PAD_PULL_LSB = GPIO_PIN0_PAD_PULL_LSB,
    .d_GPIO_PIN0_PAD_PULL_MASK = GPIO_PIN0_PAD_PULL_MASK,
    .d_SOC_CHIP_ID_ADDRESS = SOC_CHIP_ID_ADDRESS,
    .d_SOC_CHIP_ID_REVISION_MASK = SOC_CHIP_ID_REVISION_MASK,
    .d_SOC_CHIP_ID_REVISION_LSB = SOC_CHIP_ID_REVISION_LSB,
    .d_SOC_CHIP_ID_REVISION_MSB = SOC_CHIP_ID_REVISION_MSB,

    .d_WIFICMN_PCIE_BAR_REG_ADDRESS = WIFICMN_PCIE_BAR_REG_ADDRESS,
    .d_FW_AXI_MSI_ADDR = FW_AXI_MSI_ADDR,
    .d_FW_AXI_MSI_DATA = FW_AXI_MSI_DATA,
    .d_WLAN_SUBSYSTEM_CORE_ID_ADDRESS = WLAN_SUBSYSTEM_CORE_ID_ADDRESS,
    .d_FPGA_VERSION_ADDRESS = FPGA_VERSION_ADDRESS,
    .d_WIFICMN_INT_STATUS_ADDRESS = WIFICMN_INT_STATUS_ADDRESS,
};

#endif

#if MY_TARGET_BOARD_DATA_SZ > BOARD_DATA_SZ_MAX
#error "BOARD_DATA_SZ_MAX is too small"
#endif

struct targetdef_s *MY_TARGET_DEF = &my_target_def;

#else /* } { */
/* Enabled after regtable initialization in MY_TARGET_DEF */
#define RTC_SOC_BASE_ADDRESS                     (sc->targetdef->d_RTC_SOC_BASE_ADDRESS)
#define RTC_WMAC_BASE_ADDRESS                    (targetdef->d_RTC_WMAC_BASE_ADDRESS)
#define SYSTEM_SLEEP_OFFSET                      (targetdef->d_SYSTEM_SLEEP_OFFSET)
#define WLAN_SYSTEM_SLEEP_OFFSET                 (targetdef->d_WLAN_SYSTEM_SLEEP_OFFSET)
#define WLAN_SYSTEM_SLEEP_DISABLE_LSB            (targetdef->d_WLAN_SYSTEM_SLEEP_DISABLE_LSB)
#define WLAN_SYSTEM_SLEEP_DISABLE_MASK           (targetdef->d_WLAN_SYSTEM_SLEEP_DISABLE_MASK)
#define CLOCK_CONTROL_OFFSET                     (sc->targetdef->d_CLOCK_CONTROL_OFFSET)
#define CLOCK_CONTROL_SI0_CLK_MASK               (targetdef->d_CLOCK_CONTROL_SI0_CLK_MASK)
#define RESET_CONTROL_OFFSET                     (targetdef->d_RESET_CONTROL_OFFSET)
#define RESET_CONTROL_SI0_RST_MASK               (targetdef->d_RESET_CONTROL_SI0_RST_MASK)
#define WLAN_RESET_CONTROL_OFFSET                (targetdef->d_WLAN_RESET_CONTROL_OFFSET)
#define WLAN_RESET_CONTROL_COLD_RST_MASK         (targetdef->d_WLAN_RESET_CONTROL_COLD_RST_MASK)
#define WLAN_RESET_CONTROL_WARM_RST_MASK         (targetdef->d_WLAN_RESET_CONTROL_WARM_RST_MASK)
#define GPIO_BASE_ADDRESS                        (sc->targetdef->d_GPIO_BASE_ADDRESS)
#define GPIO_PIN0_OFFSET                         (sc->targetdef->d_GPIO_PIN0_OFFSET)
#define GPIO_PIN1_OFFSET                         (sc->targetdef->d_GPIO_PIN1_OFFSET)
#define GPIO_PIN0_CONFIG_MASK                    (sc->targetdef->d_GPIO_PIN0_CONFIG_MASK)
#define GPIO_PIN1_CONFIG_MASK                    (sc->targetdef->d_GPIO_PIN1_CONFIG_MASK)
#define SI_CONFIG_BIDIR_OD_DATA_LSB              (sc->targetdef->d_SI_CONFIG_BIDIR_OD_DATA_LSB)
#define SI_CONFIG_BIDIR_OD_DATA_MASK             (sc->targetdef->d_SI_CONFIG_BIDIR_OD_DATA_MASK)
#define SI_CONFIG_I2C_LSB                        (sc->targetdef->d_SI_CONFIG_I2C_LSB)
#define SI_CONFIG_I2C_MASK                       (sc->targetdef->d_SI_CONFIG_I2C_MASK)
#define SI_CONFIG_POS_SAMPLE_LSB                 (sc->targetdef->d_SI_CONFIG_POS_SAMPLE_LSB)
#define SI_CONFIG_POS_SAMPLE_MASK                (sc->targetdef->d_SI_CONFIG_POS_SAMPLE_MASK)
#define SI_CONFIG_INACTIVE_CLK_LSB               (sc->targetdef->d_SI_CONFIG_INACTIVE_CLK_LSB)
#define SI_CONFIG_INACTIVE_CLK_MASK              (sc->targetdef->d_SI_CONFIG_INACTIVE_CLK_MASK)
#define SI_CONFIG_INACTIVE_DATA_LSB              (sc->targetdef->d_SI_CONFIG_INACTIVE_DATA_LSB)
#define SI_CONFIG_INACTIVE_DATA_MASK             (sc->targetdef->d_SI_CONFIG_INACTIVE_DATA_MASK)
#define SI_CONFIG_DIVIDER_LSB                    (sc->targetdef->d_SI_CONFIG_DIVIDER_LSB)
#define SI_CONFIG_DIVIDER_MASK                   (sc->targetdef->d_SI_CONFIG_DIVIDER_MASK)
#define SI_BASE_ADDRESS                          (sc->targetdef->d_SI_BASE_ADDRESS)
#define SI_CONFIG_OFFSET                         (sc->targetdef->d_SI_CONFIG_OFFSET)
#define SI_TX_DATA0_OFFSET                       (sc->targetdef->d_SI_TX_DATA0_OFFSET)
#define SI_TX_DATA1_OFFSET                       (sc->targetdef->d_SI_TX_DATA1_OFFSET)
#define SI_RX_DATA0_OFFSET                       (sc->targetdef->d_SI_RX_DATA0_OFFSET)
#define SI_RX_DATA1_OFFSET                       (sc->targetdef->d_SI_RX_DATA1_OFFSET)
#define SI_CS_OFFSET                             (sc->targetdef->d_SI_CS_OFFSET)
#define SI_CS_DONE_ERR_MASK                      (sc->targetdef->d_SI_CS_DONE_ERR_MASK)
#define SI_CS_DONE_INT_MASK                      (sc->targetdef->d_SI_CS_DONE_INT_MASK)
#define SI_CS_START_LSB                          (sc->targetdef->d_SI_CS_START_LSB)
#define SI_CS_START_MASK                         (sc->targetdef->d_SI_CS_START_MASK)
#define SI_CS_RX_CNT_LSB                         (sc->targetdef->d_SI_CS_RX_CNT_LSB)
#define SI_CS_RX_CNT_MASK                        (sc->targetdef->d_SI_CS_RX_CNT_MASK)
#define SI_CS_TX_CNT_LSB                         (sc->targetdef->d_SI_CS_TX_CNT_LSB)
#define SI_CS_TX_CNT_MASK                        (sc->targetdef->d_SI_CS_TX_CNT_MASK)
#define EEPROM_SZ                                (targetdef->d_BOARD_DATA_SZ)
#define EEPROM_EXT_SZ                            (targetdef->d_BOARD_EXT_DATA_SZ)
#define MBOX_BASE_ADDRESS                        (targetdef->d_MBOX_BASE_ADDRESS)
#define LOCAL_SCRATCH_OFFSET                     (targetdef->d_LOCAL_SCRATCH_OFFSET)
#define CPU_CLOCK_OFFSET                         (targetdef->d_CPU_CLOCK_OFFSET)
#define GPIO_PIN10_OFFSET                        (targetdef->d_GPIO_PIN10_OFFSET)
#define GPIO_PIN11_OFFSET                        (targetdef->d_GPIO_PIN11_OFFSET)
#define GPIO_PIN12_OFFSET                        (targetdef->d_GPIO_PIN12_OFFSET)
#define GPIO_PIN13_OFFSET                        (targetdef->d_GPIO_PIN13_OFFSET)
#define CLOCK_GPIO_OFFSET                        (targetdef->d_CLOCK_GPIO_OFFSET)
#define CPU_CLOCK_STANDARD_LSB                   (targetdef->d_CPU_CLOCK_STANDARD_LSB)
#define CPU_CLOCK_STANDARD_MASK                  (targetdef->d_CPU_CLOCK_STANDARD_MASK)
#define LPO_CAL_ENABLE_LSB                       (targetdef->d_LPO_CAL_ENABLE_LSB)
#define LPO_CAL_ENABLE_MASK                      (targetdef->d_LPO_CAL_ENABLE_MASK)
#define CLOCK_GPIO_BT_CLK_OUT_EN_LSB             (targetdef->d_CLOCK_GPIO_BT_CLK_OUT_EN_LSB)
#define CLOCK_GPIO_BT_CLK_OUT_EN_MASK            (targetdef->d_CLOCK_GPIO_BT_CLK_OUT_EN_MASK)
#define ANALOG_INTF_BASE_ADDRESS                 (targetdef->d_ANALOG_INTF_BASE_ADDRESS)
#define WLAN_MAC_BASE_ADDRESS                    (targetdef->d_WLAN_MAC_BASE_ADDRESS)
#define CE0_BASE_ADDRESS                         (sc->targetdef->d_CE0_BASE_ADDRESS)
#define CE1_BASE_ADDRESS                         (sc->targetdef->d_CE1_BASE_ADDRESS)
#define FW_INDICATOR_ADDRESS                     (sc->targetdef->d_FW_INDICATOR_ADDRESS)
#define FW_CPU_PLL_CONFIG                        (sc->targetdef->d_FW_CPU_PLL_CONFIG)
#define DRAM_BASE_ADDRESS                        (sc->targetdef->d_DRAM_BASE_ADDRESS)
#define SOC_CORE_BASE_ADDRESS                    (sc->targetdef->d_SOC_CORE_BASE_ADDRESS)
#define CORE_CTRL_ADDRESS                        (sc->targetdef->d_CORE_CTRL_ADDRESS)
//#define MSI_NUM_REQUEST                          (targetdef->d_MSI_NUM_REQUEST)
//#define MSI_ASSIGN_FW                            (targetdef->d_MSI_ASSIGN_FW)
//#define MSI_ASSIGN_CE_INITIAL                    (targetdef->d_MSI_ASSIGN_CE_INITIAL)
#define PCIE_INTR_ENABLE_ADDRESS                 (sc->targetdef->d_PCIE_INTR_ENABLE_ADDRESS)
#define PCIE_INTR_CLR_ADDRESS                    (sc->targetdef->d_PCIE_INTR_CLR_ADDRESS)
#define PCIE_INTR_FIRMWARE_MASK                  (sc->targetdef->d_PCIE_INTR_FIRMWARE_MASK)
#define PCIE_INTR_CE_MASK_ALL                    (sc->targetdef->d_PCIE_INTR_CE_MASK_ALL)
#define CORE_CTRL_CPU_INTR_MASK                  (sc->targetdef->d_CORE_CTRL_CPU_INTR_MASK)
#define WIFICMN_PCIE_BAR_REG_ADDRESS             (sc->targetdef->d_WIFICMN_PCIE_BAR_REG_ADDRESS)
#define PCIE_INTR_CAUSE_ADDRESS                  (sc->targetdef->d_PCIE_INTR_CAUSE_ADDRESS)
#define SOC_RESET_CONTROL_ADDRESS                (sc->targetdef->d_SOC_RESET_CONTROL_ADDRESS)
#define SOC_RESET_CONTROL_CE_RST_MASK            (sc->targetdef->d_SOC_RESET_CONTROL_CE_RST_MASK)
#define SOC_RESET_CONTROL_CPU_WARM_RST_MASK      (sc->targetdef->d_SOC_RESET_CONTROL_CPU_WARM_RST_MASK)
#define CPU_INTR_ADDRESS                         (sc->targetdef->d_CPU_INTR_ADDRESS)
#define SOC_LF_TIMER_CONTROL0_ADDRESS            (sc->targetdef->d_SOC_LF_TIMER_CONTROL0_ADDRESS)
#define SOC_LF_TIMER_CONTROL0_ENABLE_MASK        (sc->targetdef->d_SOC_LF_TIMER_CONTROL0_ENABLE_MASK)
#define SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_LSB  (sc->targetdef->d_SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_LSB)
#define SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_MASK (sc->targetdef ->d_SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_MASK)
#define FW_AXI_MSI_ADDR                             (sc->targetdef->d_FW_AXI_MSI_ADDR)
#define FW_AXI_MSI_DATA                             (sc->targetdef->d_FW_AXI_MSI_DATA)
#define WLAN_SUBSYSTEM_CORE_ID_ADDRESS             (sc->targetdef->d_WLAN_SUBSYSTEM_CORE_ID_ADDRESS)
#define FPGA_VERSION_ADDRESS                        (sc->targetdef->d_FPGA_VERSION_ADDRESS)
#define WIFICMN_INT_STATUS_ADDRESS                (sc->targetdef->d_WIFICMN_INT_STATUS_ADDRESS)

#define SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_GET(x) (((x) & SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_MASK) >> SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_LSB)
#define SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_SET(x) (((x) << SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_LSB) & SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_MASK)


/* misc */
#define SR_WR_INDEX_ADDRESS                      (sc->targetdef->d_SR_WR_INDEX_ADDRESS)
#define DST_WATERMARK_ADDRESS                    (sc->targetdef->d_DST_WATERMARK_ADDRESS)
/* end */

/* htt_rx.c */
#if 0
#define RX_FW_DESC_OFFSET_DWORD                  (pdev->targetdef->d_RX_FW_DESC_OFFSET_DWORD)
#define RX_ATTENTION_OFFSET_DWORD                (pdev->targetdef->d_RX_ATTENTION_OFFSET_DWORD)
#define RX_FRAG_INFO_OFFSET_DWORD                (pdev->targetdef->d_RX_FRAG_INFO_OFFSET_DWORD)
#define RX_MPDU_START_OFFSET_DWORD               (pdev->targetdef->d_RX_MPDU_START_OFFSET_DWORD)
#define RX_MSDU_START_OFFSET_DWORD               (pdev->targetdef->d_RX_MSDU_START_OFFSET_DWORD)
#define RX_MSDU_END_OFFSET_DWORD                 (pdev->targetdef->d_RX_MSDU_END_OFFSET_DWORD)
#define RX_MPDU_END_OFFSET_DWORD                 (pdev->targetdef->d_RX_MPDU_END_OFFSET_DWORD)
#define RX_PPDU_START_OFFSET_DWORD               (pdev->targetdef->d_RX_PPDU_START_OFFSET_DWORD)
#define RX_PPDU_END_OFFSET_DWORD                 (pdev->targetdef->d_RX_PPDU_END_OFFSET_DWORD)
#define RX_HDR_STATUS_OFFSET_DWORD               (pdev->targetdef->d_RX_HDR_STATUS_OFFSET_DWORD)
#define RX_MPDU_START_0_ENCRYPTED_MASK           (pdev->targetdef->d_RX_MPDU_START_0_ENCRYPTED_MASK)
#define RX_MPDU_START_0_ENCRYPTED_LSB            (pdev->targetdef->d_RX_MPDU_START_0_ENCRYPTED_LSB)
#define RX_MPDU_START_0_TO_DS_MASK               (pdev->targetdef->d_RX_MPDU_START_0_TO_DS_MASK)
#define RX_MPDU_START_0_TO_DS_LSB                (pdev->targetdef->d_RX_MPDU_START_0_TO_DS_LSB)
#define RX_MPDU_START_0_FR_DS_MASK               (pdev->targetdef->d_RX_MPDU_START_0_FR_DS_MASK)
#define RX_MPDU_START_0_FR_DS_LSB                (pdev->targetdef->d_RX_MPDU_START_0_FR_DS_LSB)
#define RX_MPDU_START_0_SEQ_NUM_MASK             (pdev->targetdef->d_RX_MPDU_START_0_SEQ_NUM_MASK)
#define RX_MPDU_START_0_SEQ_NUM_LSB              (pdev->targetdef->d_RX_MPDU_START_0_SEQ_NUM_LSB)
#define RX_MPDU_START_1_PN_31_0_MASK             (pdev->targetdef->d_RX_MPDU_START_1_PN_31_0_MASK)
#define RX_MPDU_START_1_PN_31_0_LSB              (pdev->targetdef->d_RX_MPDU_START_1_PN_31_0_LSB)
#define RX_MPDU_START_2_PN_47_32_LSB             (pdev->targetdef->d_RX_MPDU_START_2_PN_47_32_LSB)
#define RX_MPDU_START_2_PN_47_32_MASK            (pdev->targetdef->d_RX_MPDU_START_2_PN_47_32_MASK)
#define RX_MSDU_START_0_MSDU_LENGTH_MASK         (pdev->targetdef->d_RX_MSDU_START_0_MSDU_LENGTH_MASK)
#define RX_MSDU_START_0_MSDU_LENGTH_LSB          (pdev->targetdef->d_RX_MSDU_START_0_MSDU_LENGTH_LSB)
#define RX_MSDU_START_0_IP_OFFSET_MASK           (pdev->targetdef->d_RX_MSDU_START_0_IP_OFFSET_MASK)
#define RX_MSDU_START_0_IP_OFFSET_LSB            (pdev->targetdef->d_RX_MSDU_START_0_IP_OFFSET_LSB)
#define RX_MSDU_START_0_TCP_UDP_OFFSET_MASK      (pdev->targetdef->d_RX_MSDU_START_0_TCP_UDP_OFFSET_MASK)
#define RX_MSDU_START_0_TCP_UDP_OFFSET_LSB       (pdev->targetdef->d_RX_MSDU_START_0_TCP_UDP_OFFSET_LSB)
#define RX_MSDU_START_1_FLOW_ID_CRC_MASK         (pdev->targetdef->d_RX_MSDU_START_1_FLOW_ID_CRC_MASK)
#define RX_MSDU_START_1_FLOW_ID_CRC_LSB          (pdev->targetdef->d_RX_MSDU_START_1_FLOW_ID_CRC_LSB)
#define RX_MSDU_START_2_TCP_PROTO_MASK           (pdev->targetdef->d_RX_MSDU_START_2_TCP_PROTO_MASK)
#define RX_MSDU_START_2_TCP_PROTO_LSB            (pdev->targetdef->d_RX_MSDU_START_2_TCP_PROTO_LSB)
#define RX_MSDU_START_2_UDP_PROTO_MASK           (pdev->targetdef->d_RX_MSDU_START_2_UDP_PROTO_MASK)
#define RX_MSDU_START_2_UDP_PROTO_LSB            (pdev->targetdef->d_RX_MSDU_START_2_UDP_PROTO_LSB)
#define RX_MSDU_START_2_IP_FRAG_MASK             (pdev->targetdef->d_RX_MSDU_START_2_IP_FRAG_MASK)
#define RX_MSDU_START_2_IP_FRAG_LSB              (pdev->targetdef->d_RX_MSDU_START_2_IP_FRAG_LSB)
#define RX_MSDU_START_2_IPV6_PROTO_MASK          (pdev->targetdef->d_RX_MSDU_START_2_IPV6_PROTO_MASK)
#define RX_MSDU_START_2_IPV6_PROTO_LSB           (pdev->targetdef->d_RX_MSDU_START_2_IPV6_PROTO_LSB)
#define RX_MSDU_START_2_TCP_ONLY_ACK_MASK        (pdev->targetdef->d_RX_MSDU_START_2_TCP_ONLY_ACK_MASK)
#define RX_MSDU_START_2_TCP_ONLY_ACK_LSB         (pdev->targetdef->d_RX_MSDU_START_2_TCP_ONLY_ACK_LSB)
#define RX_MSDU_START_2_DECAP_FORMAT_OFFSET      (pdev->targetdef->d_RX_MSDU_START_2_DECAP_FORMAT_OFFSET)
#define RX_MSDU_START_2_DECAP_FORMAT_MASK        (pdev->targetdef->d_RX_MSDU_START_2_DECAP_FORMAT_MASK)
#define RX_MSDU_START_2_DECAP_FORMAT_LSB         (pdev->targetdef->d_RX_MSDU_START_2_DECAP_FORMAT_LSB)
#define RX_MSDU_END_0_TCP_UDP_CHKSUM_MASK        (pdev->targetdef->d_RX_MSDU_END_0_TCP_UDP_CHKSUM_MASK)
#define RX_MSDU_END_0_TCP_UDP_CHKSUM_LSB         (pdev->targetdef->d_RX_MSDU_END_0_TCP_UDP_CHKSUM_LSB)
#define RX_MSDU_END_1_EXT_WAPI_PN_63_48_MASK     (pdev->targetdef->d_RX_MSDU_END_1_EXT_WAPI_PN_63_48_MASK)
#define RX_MSDU_END_1_EXT_WAPI_PN_63_48_LSB      (pdev->targetdef->d_RX_MSDU_END_1_EXT_WAPI_PN_63_48_LSB)
#define RX_MSDU_END_2_EXT_WAPI_PN_95_64_MASK     (pdev->targetdef->d_RX_MSDU_END_2_EXT_WAPI_PN_95_64_MASK)
#define RX_MSDU_END_2_EXT_WAPI_PN_95_64_LSB      (pdev->targetdef->d_RX_MSDU_END_2_EXT_WAPI_PN_95_64_LSB)
#define RX_MSDU_END_3_EXT_WAPI_PN_127_96_MASK    (pdev->targetdef->d_RX_MSDU_END_3_EXT_WAPI_PN_127_96_MASK)
#define RX_MSDU_END_3_EXT_WAPI_PN_127_96_LSB     (pdev->targetdef->d_RX_MSDU_END_3_EXT_WAPI_PN_127_96_LSB)
#define RX_MSDU_END_4_FIRST_MSDU_MASK            (pdev->targetdef->d_RX_MSDU_END_4_FIRST_MSDU_MASK)
#define RX_MSDU_END_4_FIRST_MSDU_LSB             (pdev->targetdef->d_RX_MSDU_END_4_FIRST_MSDU_LSB)
#define RX_MSDU_END_4_LAST_MSDU_MASK             (pdev->targetdef->d_RX_MSDU_END_4_LAST_MSDU_MASK)
#define RX_MSDU_END_4_LAST_MSDU_LSB              (pdev->targetdef->d_RX_MSDU_END_4_LAST_MSDU_LSB)
#define RX_MSDU_END_8_LRO_ELIGIBLE_MASK          (pdev->targetdef->d_RX_MSDU_END_8_LRO_ELIGIBLE_MASK)
#define RX_MSDU_END_8_LRO_ELIGIBLE_LSB           (pdev->targetdef->d_RX_MSDU_END_8_LRO_ELIGIBLE_LSB)
#define RX_MSDU_END_8_L3_HEADER_PADDING_MASK     (pdev->targetdef->d_RX_MSDU_END_8_L3_HEADER_PADDING_MASK)
#define RX_MSDU_END_8_L3_HEADER_PADDING_LSB      (pdev->targetdef->d_RX_MSDU_END_8_L3_HEADER_PADDING_LSB)
#define RX_PPDU_START_4_RSSI_COMB_MASK           (pdev->targetdef->d_RX_PPDU_START_4_RSSI_COMB_MASK)
#define RX_PPDU_START_4_RSSI_COMB_LSB            (pdev->targetdef->d_RX_PPDU_START_4_RSSI_COMB_LSB)
#define RX_PPDU_START_5_PREAMBLE_TYPE_MASK       (pdev->targetdef->d_RX_PPDU_START_5_PREAMBLE_TYPE_MASK)
#define RX_PPDU_START_5_PREAMBLE_TYPE_LSB        (pdev->targetdef->d_RX_PPDU_START_5_PREAMBLE_TYPE_LSB)
#define RX_PPDU_START_5_L_SIG_RATE_MASK          (pdev->targetdef->d_RX_PPDU_START_5_L_SIG_RATE_MASK)
#define RX_PPDU_START_5_L_SIG_RATE_LSB           (pdev->targetdef->d_RX_PPDU_START_5_L_SIG_RATE_LSB)
#define RX_PPDU_START_5_L_SIG_RATE_SELECT_MASK   (pdev->targetdef->d_RX_PPDU_START_5_L_SIG_RATE_SELECT_MASK)
#define RX_PPDU_START_5_L_SIG_RATE_SELECT_LSB    (pdev->targetdef->d_RX_PPDU_START_5_L_SIG_RATE_SELECT_LSB)
#define RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_MASK  (pdev->targetdef->d_RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_MASK)
#define RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_LSB   (pdev->targetdef->d_RX_PPDU_START_6_HT_SIG_VHT_SIG_A_1_LSB)
#define RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_MASK  (pdev->targetdef->d_RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_MASK)
#define RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_LSB   (pdev->targetdef->d_RX_PPDU_START_7_HT_SIG_VHT_SIG_A_2_LSB)
#define RX_PPDU_START_8_VHT_SIG_B_MASK           (pdev->targetdef->d_RX_PPDU_START_8_VHT_SIG_B_MASK)
#define RX_PPDU_START_8_VHT_SIG_B_LSB            (pdev->targetdef->d_RX_PPDU_START_8_VHT_SIG_B_LSB)
#define RX_PPDU_START_9_SERVICE_MASK             (pdev->targetdef->d_RX_PPDU_START_9_SERVICE_MASK)
#define RX_PPDU_START_9_SERVICE_LSB              (pdev->targetdef->d_RX_PPDU_START_9_SERVICE_LSB)
#define RX_PPDU_END_16_TSF_TIMESTAMP_MASK        (pdev->targetdef->d_RX_PPDU_END_16_TSF_TIMESTAMP_MASK)
#define RX_PPDU_END_16_TSF_TIMESTAMP_LSB         (pdev->targetdef->d_RX_PPDU_END_16_TSF_TIMESTAMP_LSB)
#define RX_PPDU_END_ANTENNA_OFFSET_DWORD         (pdev->targetdef->d_RX_PPDU_END_ANTENNA_OFFSET)
#define RX_ATTENTION_0_FIRST_MPDU_MASK           (pdev->targetdef->d_RX_ATTENTION_0_FIRST_MPDU_MASK)
#define RX_ATTENTION_0_FIRST_MPDU_LSB            (pdev->targetdef->d_RX_ATTENTION_0_FIRST_MPDU_LSB)
#define RX_ATTENTION_0_LAST_MPDU_MASK            (pdev->targetdef->d_RX_ATTENTION_0_LAST_MPDU_MASK)
#define RX_ATTENTION_0_LAST_MPDU_LSB             (pdev->targetdef->d_RX_ATTENTION_0_LAST_MPDU_LSB)
#define RX_ATTENTION_0_MCAST_BCAST_MASK          (pdev->targetdef->d_RX_ATTENTION_0_MCAST_BCAST_MASK)
#define RX_ATTENTION_0_MCAST_BCAST_LSB           (pdev->targetdef->d_RX_ATTENTION_0_MCAST_BCAST_LSB)
#define RX_ATTENTION_0_FRAGMENT_MASK             (pdev->targetdef->d_RX_ATTENTION_0_FRAGMENT_MASK)
#define RX_ATTENTION_0_FRAGMENT_LSB              (pdev->targetdef->d_RX_ATTENTION_0_FRAGMENT_LSB)
#define RX_ATTENTION_0_MPDU_LENGTH_ERR_MASK      (pdev->targetdef->d_RX_ATTENTION_0_MPDU_LENGTH_ERR_MASK)
#define RX_ATTENTION_0_MORE_DATA_MASK            (pdev->targetdef->d_RX_ATTENTION_0_MORE_DATA_MASK)
#define RX_ATTENTION_0_MSDU_DONE_MASK            (pdev->targetdef->d_RX_ATTENTION_0_MSDU_DONE_MASK)
#define RX_ATTENTION_0_TCP_UDP_CHKSUM_FAIL_MASK  (pdev->targetdef->d_RX_ATTENTION_0_TCP_UDP_CHKSUM_FAIL_MASK)
#define RX_ATTENTION_0_FCS_ERR_MASK              (pdev->targetdef->d_RX_ATTENTION_0_FCS_ERR_MASK)
#define RX_ATTENTION_0_MGMT_TYPE_MASK            (pdev->targetdef->d_RX_ATTENTION_0_MGMT_TYPE_MASK)
#define RX_ATTENTION_0_PHY_DATA_TYPE_MASK        (pdev->targetdef->d_RX_ATTENTION_0_PHY_DATA_TYPE_MASK)
#define RX_FRAG_INFO_0_RING2_MORE_COUNT_MASK     (pdev->targetdef->d_RX_FRAG_INFO_0_RING2_MORE_COUNT_MASK)
#define RX_FRAG_INFO_0_RING2_MORE_COUNT_LSB      (pdev->targetdef->d_RX_FRAG_INFO_0_RING2_MORE_COUNT_LSB)
#endif
    /* htt tx */
#define MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_MASK (pdev->targetdef->d_MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_MASK)
#define MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_MASK (pdev->targetdef->d_MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_MASK)
#define MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_MASK (pdev->targetdef->d_MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_MASK)
#define MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_MASK (pdev->targetdef->d_MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_MASK)
#define MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_LSB  (pdev->targetdef->d_MSDU_LINK_EXT_3_TCP_OVER_IPV4_CHECKSUM_EN_LSB)
#define MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_LSB  (pdev->targetdef->d_MSDU_LINK_EXT_3_TCP_OVER_IPV6_CHECKSUM_EN_LSB)
#define MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_LSB  (pdev->targetdef->d_MSDU_LINK_EXT_3_UDP_OVER_IPV4_CHECKSUM_EN_LSB)
#define MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_LSB  (pdev->targetdef->d_MSDU_LINK_EXT_3_UDP_OVER_IPV6_CHECKSUM_EN_LSB)
/* copy_engine.c */
#define CE_COUNT                                 (sc->targetdef->d_CE_COUNT)
#define SR_WR_INDEX_ADDRESS                      (sc->targetdef->d_SR_WR_INDEX_ADDRESS)
#define DST_WATERMARK_ADDRESS                    (sc->targetdef->d_DST_WATERMARK_ADDRESS)
#define DST_WR_INDEX_ADDRESS                     (sc->targetdef->d_DST_WR_INDEX_ADDRESS)
#define SRC_WATERMARK_ADDRESS                    (sc->targetdef->d_SRC_WATERMARK_ADDRESS)
#define SRC_WATERMARK_LOW_MASK                   (sc->targetdef->d_SRC_WATERMARK_LOW_MASK)
#define SRC_WATERMARK_HIGH_MASK                  (sc->targetdef->d_SRC_WATERMARK_HIGH_MASK)
#define DST_WATERMARK_LOW_MASK                   (sc->targetdef->d_DST_WATERMARK_LOW_MASK)
#define DST_WATERMARK_HIGH_MASK                  (sc->targetdef->d_DST_WATERMARK_HIGH_MASK)
#define CURRENT_SRRI_ADDRESS                     (sc->targetdef->d_CURRENT_SRRI_ADDRESS)
#define CURRENT_DRRI_ADDRESS                     (sc->targetdef->d_CURRENT_DRRI_ADDRESS)
#define HOST_IS_SRC_RING_HIGH_WATERMARK_MASK     (sc->targetdef->d_HOST_IS_SRC_RING_HIGH_WATERMARK_MASK)
#define HOST_IS_SRC_RING_LOW_WATERMARK_MASK      (sc->targetdef->d_HOST_IS_SRC_RING_LOW_WATERMARK_MASK)
#define HOST_IS_DST_RING_HIGH_WATERMARK_MASK     (sc->targetdef->d_HOST_IS_DST_RING_HIGH_WATERMARK_MASK)
#define HOST_IS_DST_RING_LOW_WATERMARK_MASK      (sc->targetdef->d_HOST_IS_DST_RING_LOW_WATERMARK_MASK)
#define HOST_IS_ADDRESS                          (sc->targetdef->d_HOST_IS_ADDRESS)
#define HOST_IS_COPY_COMPLETE_MASK               (sc->targetdef->d_HOST_IS_COPY_COMPLETE_MASK)
#define CE_CMD_ADDRESS                           (sc->targetdef->d_CE_CMD_ADDRESS)
#define CE_CMD_HALT_MASK                         (sc->targetdef->d_CE_CMD_HALT_MASK)
#define CE_WRAPPER_BASE_ADDRESS                  (sc->targetdef->d_CE_WRAPPER_BASE_ADDRESS)
#define CE_WRAPPER_INTERRUPT_SUMMARY_ADDRESS     (sc->targetdef->d_CE_WRAPPER_INTERRUPT_SUMMARY_ADDRESS)
#define HOST_IE_ADDRESS                          (sc->targetdef->d_HOST_IE_ADDRESS)
#define HOST_IE_COPY_COMPLETE_MASK               (sc->targetdef->d_HOST_IE_COPY_COMPLETE_MASK)
#define SR_BA_ADDRESS                            (sc->targetdef->d_SR_BA_ADDRESS)
#define SR_SIZE_ADDRESS                          (sc->targetdef->d_SR_SIZE_ADDRESS)
#define CE_CTRL1_ADDRESS                         (sc->targetdef->d_CE_CTRL1_ADDRESS)
#define CE_CTRL1_DMAX_LENGTH_MASK                (sc->targetdef->d_CE_CTRL1_DMAX_LENGTH_MASK)
#define DR_BA_ADDRESS                            (sc->targetdef->d_DR_BA_ADDRESS)
#define DR_SIZE_ADDRESS                          (sc->targetdef->d_DR_SIZE_ADDRESS)
#define MISC_IE_ADDRESS                          (sc->targetdef->d_MISC_IE_ADDRESS)
#define MISC_IS_AXI_ERR_MASK                     (sc->targetdef->d_MISC_IS_AXI_ERR_MASK)
#define MISC_IS_DST_ADDR_ERR_MASK                (sc->targetdef->d_MISC_IS_DST_ADDR_ERR_MASK)
#define MISC_IS_SRC_LEN_ERR_MASK                 (sc->targetdef->d_MISC_IS_SRC_LEN_ERR_MASK)
#define MISC_IS_DST_MAX_LEN_VIO_MASK             (sc->targetdef->d_MISC_IS_DST_MAX_LEN_VIO_MASK)
#define MISC_IS_DST_RING_OVERFLOW_MASK           (sc->targetdef->d_MISC_IS_DST_RING_OVERFLOW_MASK)
#define MISC_IS_SRC_RING_OVERFLOW_MASK           (sc->targetdef->d_MISC_IS_SRC_RING_OVERFLOW_MASK)
#define SRC_WATERMARK_LOW_LSB                    (sc->targetdef->d_SRC_WATERMARK_LOW_LSB)
#define SRC_WATERMARK_HIGH_LSB                   (sc->targetdef->d_SRC_WATERMARK_HIGH_LSB)
#define DST_WATERMARK_LOW_LSB                    (sc->targetdef->d_DST_WATERMARK_LOW_LSB)
#define DST_WATERMARK_HIGH_LSB                   (sc->targetdef->d_DST_WATERMARK_HIGH_LSB)
#define CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_MASK (sc->targetdef->d_CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_MASK)
#define CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_LSB  (sc->targetdef->d_CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_LSB)
#define CE_CTRL1_DMAX_LENGTH_LSB                 (sc->targetdef->d_CE_CTRL1_DMAX_LENGTH_LSB)
#define CE_CTRL1_SRC_RING_BYTE_SWAP_EN_MASK      (sc->targetdef->d_CE_CTRL1_SRC_RING_BYTE_SWAP_EN_MASK)
#define CE_CTRL1_DST_RING_BYTE_SWAP_EN_MASK      (sc->targetdef->d_CE_CTRL1_DST_RING_BYTE_SWAP_EN_MASK)
#define CE_CTRL1_SRC_RING_BYTE_SWAP_EN_LSB       (sc->targetdef->d_CE_CTRL1_SRC_RING_BYTE_SWAP_EN_LSB)
#define CE_CTRL1_DST_RING_BYTE_SWAP_EN_LSB       (sc->targetdef->d_CE_CTRL1_DST_RING_BYTE_SWAP_EN_LSB)
#define CE_CMD_HALT_STATUS_MASK                  (sc->targetdef->d_CE_CMD_HALT_STATUS_MASK)
#define CE_CMD_HALT_STATUS_LSB                   (sc->targetdef->d_CE_CMD_HALT_STATUS_LSB)
#if 0
#define CE_SRC_DESC_SIZE_DWORD                   (sc->targetdef->d_CE_SRC_DESC_SIZE_DWORD)
#define CE_DEST_DESC_SIZE_DWORD                  (sc->targetdef->d_CE_DEST_DESC_SIZE_DWORD)
#define CE_SRC_DESC_SRC_PTR_OFFSET_DWORD         (sc->targetdef->d_CE_SRC_DESC_SRC_PTR_OFFSET_DWORD)
#define CE_SRC_DESC_INFO_OFFSET_DWORD            (sc->targetdef->d_CE_SRC_DESC_INFO_OFFSET_DWORD)
#define CE_DEST_DESC_DEST_PTR_OFFSET_DWORD       (sc->targetdef->d_CE_DEST_DESC_DEST_PTR_OFFSET_DWORD)
#define CE_DEST_DESC_INFO_OFFSET_DWORD           (sc->targetdef->d_CE_DEST_DESC_INFO_OFFSET_DWORD)
#define CE_SRC_DESC_INFO_NBYTES_MASK             (sc->targetdef->d_CE_SRC_DESC_INFO_NBYTES_MASK)
#define CE_SRC_DESC_INFO_NBYTES_SHIFT            (sc->targetdef->d_CE_SRC_DESC_INFO_NBYTES_SHIFT)
#define CE_SRC_DESC_INFO_GATHER_MASK             (sc->targetdef->d_CE_SRC_DESC_INFO_GATHER_MASK)
#define CE_SRC_DESC_INFO_GATHER_SHIFT            (sc->targetdef->d_CE_SRC_DESC_INFO_GATHER_SHIFT)
#define CE_SRC_DESC_INFO_BYTE_SWAP_MASK          (sc->targetdef->d_CE_SRC_DESC_INFO_BYTE_SWAP_MASK)
#define CE_SRC_DESC_INFO_BYTE_SWAP_SHIFT         (sc->targetdef->d_CE_SRC_DESC_INFO_BYTE_SWAP_SHIFT)
#define CE_SRC_DESC_INFO_HOST_INT_DISABLE_MASK   (sc->targetdef->d_CE_SRC_DESC_INFO_HOST_INT_DISABLE_MASK)
#define CE_SRC_DESC_INFO_HOST_INT_DISABLE_SHIFT  (sc->targetdef->d_CE_SRC_DESC_INFO_HOST_INT_DISABLE_SHIFT)
#define CE_SRC_DESC_INFO_TARGET_INT_DISABLE_MASK (sc->targetdef->d_CE_SRC_DESC_INFO_TARGET_INT_DISABLE_MASK)
#define CE_SRC_DESC_INFO_TARGET_INT_DISABLE_SHIFT (sc->targetdef->d_CE_SRC_DESC_INFO_TARGET_INT_DISABLE_SHIFT)
#define CE_SRC_DESC_INFO_META_DATA_MASK          (sc->targetdef->d_CE_SRC_DESC_INFO_META_DATA_MASK)
#define CE_SRC_DESC_INFO_META_DATA_SHIFT         (sc->targetdef->d_CE_SRC_DESC_INFO_META_DATA_SHIFT)
#define CE_DEST_DESC_INFO_NBYTES_MASK            (sc->targetdef->d_CE_DEST_DESC_INFO_NBYTES_MASK)
#define CE_DEST_DESC_INFO_NBYTES_SHIFT           (sc->targetdef->d_CE_DEST_DESC_INFO_NBYTES_SHIFT)
#define CE_DEST_DESC_INFO_GATHER_MASK            (sc->targetdef->d_CE_DEST_DESC_INFO_GATHER_MASK)
#define CE_DEST_DESC_INFO_GATHER_SHIFT           (sc->targetdef->d_CE_DEST_DESC_INFO_GATHER_SHIFT)
#define CE_DEST_DESC_INFO_BYTE_SWAP_MASK         (sc->targetdef->d_CE_DEST_DESC_INFO_BYTE_SWAP_MASK)
#define CE_DEST_DESC_INFO_BYTE_SWAP_SHIFT        (sc->targetdef->d_CE_DEST_DESC_INFO_BYTE_SWAP_SHIFT)
#define CE_DEST_DESC_INFO_HOST_INT_DISABLE_MASK  (sc->targetdef->d_CE_DEST_DESC_INFO_HOST_INT_DISABLE_MASK)
#define CE_DEST_DESC_INFO_HOST_INT_DISABLE_SHIFT (sc->targetdef->d_CE_DEST_DESC_INFO_HOST_INT_DISABLE_SHIFT)
#define CE_DEST_DESC_INFO_TARGET_INT_DISABLE_MASK (sc->targetdef->d_CE_DEST_DESC_INFO_TARGET_INT_DISABLE_MASK)
#define CE_DEST_DESC_INFO_TARGET_INT_DISABLE_SHIFT (sc->targetdef->d_CE_DEST_DESC_INFO_TARGET_INT_DISABLE_SHIFT)
#define CE_DEST_DESC_INFO_META_DATA_MASK         (sc->targetdef->d_CE_DEST_DESC_INFO_META_DATA_MASK)
#define CE_DEST_DESC_INFO_META_DATA_SHIFT        (sc->targetdef->d_CE_DEST_DESC_INFO_META_DATA_SHIFT)
#endif

#define SI_CONFIG_ERR_INT_MASK                   (sc->targetdef->d_SI_CONFIG_ERR_INT_MASK)
#define SI_CONFIG_ERR_INT_LSB                    (sc->targetdef->d_SI_CONFIG_ERR_INT_LSB)
#define GPIO_ENABLE_W1TS_LOW_ADDRESS             (sc->targetdef->d_GPIO_ENABLE_W1TS_LOW_ADDRESS)
#define GPIO_PIN0_CONFIG_LSB                     (sc->targetdef->d_GPIO_PIN0_CONFIG_LSB)
#define GPIO_PIN0_PAD_PULL_LSB                   (sc->targetdef->d_GPIO_PIN0_PAD_PULL_LSB)
#define GPIO_PIN0_PAD_PULL_MASK                  (sc->targetdef->d_GPIO_PIN0_PAD_PULL_MASK)

#define SOC_CHIP_ID_ADDRESS                      (sc->targetdef->d_SOC_CHIP_ID_ADDRESS)
#define SOC_CHIP_ID_REVISION_MASK                (sc->targetdef->d_SOC_CHIP_ID_REVISION_MASK)
#define SOC_CHIP_ID_REVISION_LSB                 (sc->targetdef->d_SOC_CHIP_ID_REVISION_LSB)
#define SOC_CHIP_ID_REVISION_MSB                 (sc->targetdef->d_SOC_CHIP_ID_REVISION_MSB)


/* SET macros */
#define WLAN_SYSTEM_SLEEP_DISABLE_SET(x)         (((x) << WLAN_SYSTEM_SLEEP_DISABLE_LSB) & WLAN_SYSTEM_SLEEP_DISABLE_MASK)
#define SI_CONFIG_ERR_INT_SET(x)                 (((x) << SI_CONFIG_ERR_INT_LSB) & SI_CONFIG_ERR_INT_MASK)
#define SI_CONFIG_BIDIR_OD_DATA_SET(x)           (((x) << SI_CONFIG_BIDIR_OD_DATA_LSB) & SI_CONFIG_BIDIR_OD_DATA_MASK)
#define SI_CONFIG_I2C_SET(x)                     (((x) << SI_CONFIG_I2C_LSB) & SI_CONFIG_I2C_MASK)
#define SI_CONFIG_POS_SAMPLE_SET(x)              (((x) << SI_CONFIG_POS_SAMPLE_LSB) & SI_CONFIG_POS_SAMPLE_MASK)
#define SI_CONFIG_INACTIVE_CLK_SET(x)            (((x) << SI_CONFIG_INACTIVE_CLK_LSB) & SI_CONFIG_INACTIVE_CLK_MASK)
#define SI_CONFIG_INACTIVE_DATA_SET(x)           (((x) << SI_CONFIG_INACTIVE_DATA_LSB) & SI_CONFIG_INACTIVE_DATA_MASK)
#define SI_CONFIG_DIVIDER_SET(x)                 (((x) << SI_CONFIG_DIVIDER_LSB) & SI_CONFIG_DIVIDER_MASK)
#define SI_CS_START_SET(x)                       (((x) << SI_CS_START_LSB) & SI_CS_START_MASK)
#define SI_CS_RX_CNT_SET(x)                      (((x) << SI_CS_RX_CNT_LSB) & SI_CS_RX_CNT_MASK)
#define SI_CS_TX_CNT_SET(x)                      (((x) << SI_CS_TX_CNT_LSB) & SI_CS_TX_CNT_MASK)
#define LPO_CAL_ENABLE_SET(x)                    (((x) << LPO_CAL_ENABLE_LSB) & LPO_CAL_ENABLE_MASK)
#define CPU_CLOCK_STANDARD_SET(x)                (((x) << CPU_CLOCK_STANDARD_LSB) & CPU_CLOCK_STANDARD_MASK)
#define CLOCK_GPIO_BT_CLK_OUT_EN_SET(x)          (((x) << CLOCK_GPIO_BT_CLK_OUT_EN_LSB) & CLOCK_GPIO_BT_CLK_OUT_EN_MASK)

#define WLAN_GPIO_PIN0_CONFIG_SET(x)             (((x) << GPIO_PIN0_CONFIG_LSB) & GPIO_PIN0_CONFIG_MASK)
#define WLAN_GPIO_PIN0_PAD_PULL_SET(x)           (((x) << GPIO_PIN0_PAD_PULL_LSB) & GPIO_PIN0_PAD_PULL_MASK)
#define SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_GET(x) (((x) & SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_MASK) >> SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_LSB)
#define SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_SET(x) (((x) << SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_LSB) & SOC_RESET_CONTROL_PCIE_RST_SHORT_OVRD_MASK)

#define SOC_CHIP_ID_REVISION_GET(x)               (((x) & SOC_CHIP_ID_REVISION_MASK) >> SOC_CHIP_ID_REVISION_LSB)
/* copy_engine.c */
#define SRC_WATERMARK_LOW_SET(x)                                     (((0 | (x)) << SRC_WATERMARK_LOW_LSB) & SRC_WATERMARK_LOW_MASK)
#define SRC_WATERMARK_HIGH_SET(x)                                    (((0 | (x)) << SRC_WATERMARK_HIGH_LSB) & SRC_WATERMARK_HIGH_MASK)
#define DST_WATERMARK_LOW_SET(x)                                     (((0 | (x)) << DST_WATERMARK_LOW_LSB) & DST_WATERMARK_LOW_MASK)
#define DST_WATERMARK_HIGH_SET(x)                                    (((0 | (x)) << DST_WATERMARK_HIGH_LSB) & DST_WATERMARK_HIGH_MASK)
#define CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_GET(x)                 (((x) & CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_MASK) >> CE_WRAPPER_INTERRUPT_SUMMARY_HOST_MSI_LSB)
#define CE_CTRL1_DMAX_LENGTH_SET(x)                                  (((0 | (x)) << CE_CTRL1_DMAX_LENGTH_LSB) & CE_CTRL1_DMAX_LENGTH_MASK)
#define CE_CTRL1_SRC_RING_BYTE_SWAP_EN_SET(x)                        (((0 | (x)) << CE_CTRL1_SRC_RING_BYTE_SWAP_EN_LSB) & CE_CTRL1_SRC_RING_BYTE_SWAP_EN_MASK)
#define CE_CTRL1_DST_RING_BYTE_SWAP_EN_SET(x)                        (((0 | (x)) << CE_CTRL1_DST_RING_BYTE_SWAP_EN_LSB) & CE_CTRL1_DST_RING_BYTE_SWAP_EN_MASK)
#define CE_CMD_HALT_STATUS_GET(x)                                    (((x) & CE_CMD_HALT_STATUS_MASK) >> CE_CMD_HALT_STATUS_LSB)
/* end */

#define WLAN_GPIO_PIN0_CONFIG_SET(x)             (((x) << GPIO_PIN0_CONFIG_LSB) & GPIO_PIN0_CONFIG_MASK)
#define WLAN_GPIO_PIN0_PAD_PULL_SET(x)           (((x) << GPIO_PIN0_PAD_PULL_LSB) & GPIO_PIN0_PAD_PULL_MASK)

#if ATH_GEN_RANDOMNESS
#ifndef RX_PPDU_START_0_RSSI_PRI_CHAIN0_MASK
#define RX_PPDU_START_0_RSSI_PRI_CHAIN0_MASK     RX_PPDU_START_0_RSSI_CHAIN0_PRI20_MASK
#define RX_PPDU_START_0_RSSI_SEC80_CHAIN0_MASK   RX_PPDU_START_0_RSSI_CHAIN0_SEC80_MASK
#define RX_PPDU_START_0_RSSI_PRI_CHAIN0_LSB      RX_PPDU_START_0_RSSI_CHAIN0_PRI20_LSB
#define RX_PPDU_START_0_RSSI_SEC80_CHAIN0_LSB    RX_PPDU_START_0_RSSI_CHAIN0_SEC80_LSB
#endif
#endif

#endif /* } */

#endif /*TARGET_REG_TABLE_H_*/
